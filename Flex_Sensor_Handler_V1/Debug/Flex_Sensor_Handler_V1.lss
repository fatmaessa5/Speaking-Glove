
Flex_Sensor_Handler_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00003416  000034aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080018e  0080018e  000035d8  2**0
                  ALLOC
  3 .stab         000033c0  00000000  00000000  000035d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002faa  00000000  00000000  00006998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009942  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00009b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00009d12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000c39c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000d87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000eb28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000ed08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000f006  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 6b 08 	jmp	0x10d6	; 0x10d6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 39 16 	call	0x2c72	; 0x2c72 <main>
      8a:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 19 	jmp	0x33a4	; 0x33a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 fa 19 	jmp	0x33f4	; 0x33f4 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 e2 19 	jmp	0x33c4	; 0x33c4 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 57       	subi	r30, 0x78	; 120
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <USART_init>:

/********************************************* Functions Implementations **************************************/

/*********************************************************************************************/
USART_Error_t USART_init(USART_Config_t * Copy_StrPtr)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <USART_init+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9b 83       	std	Y+3, r25	; 0x03
     e9c:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Copy_StrPtr)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	9b 81       	ldd	r25, Y+3	; 0x03
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	19 f4       	brne	.+6      	; 0xeb0 <USART_init+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	99 c0       	rjmp	.+306    	; 0xfe2 <USART_init+0x154>

#elif USART_MODE == USART_OperMode_t_Async
		//set the Asynchronous operation mode --> doNothing (because we can't set the USREL bit and clear the UMSEL bit at the same instruction)

		// set the speed mode
		USART_UCSRA &= (~(1<<1));
     eb0:	ab e2       	ldi	r26, 0x2B	; 43
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	eb e2       	ldi	r30, 0x2B	; 43
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8d 7f       	andi	r24, 0xFD	; 253
     ebc:	8c 93       	st	X, r24
		USART_UCSRA |= ((Copy_StrPtr->usart_speed_slct)<<1);
     ebe:	ab e2       	ldi	r26, 0x2B	; 43
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	eb e2       	ldi	r30, 0x2B	; 43
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	28 2f       	mov	r18, r24
     eca:	ea 81       	ldd	r30, Y+2	; 0x02
     ecc:	fb 81       	ldd	r31, Y+3	; 0x03
     ece:	84 81       	ldd	r24, Z+4	; 0x04
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	82 2b       	or	r24, r18
     eda:	8c 93       	st	X, r24

		//set Baud rate to 9600
		if(USART_Speed_t_NormalSpeed == Copy_StrPtr->usart_speed_slct)
     edc:	ea 81       	ldd	r30, Y+2	; 0x02
     ede:	fb 81       	ldd	r31, Y+3	; 0x03
     ee0:	84 81       	ldd	r24, Z+4	; 0x04
     ee2:	88 23       	and	r24, r24
     ee4:	41 f4       	brne	.+16     	; 0xef6 <USART_init+0x68>
		{
			USART_UBRRH_UCSRC = 0;
     ee6:	e0 e4       	ldi	r30, 0x40	; 64
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	10 82       	st	Z, r1
			USART_UBRRL = 51;
     eec:	e9 e2       	ldi	r30, 0x29	; 41
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	83 e3       	ldi	r24, 0x33	; 51
     ef2:	80 83       	st	Z, r24
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <USART_init+0x84>

		}
		else if(USART_Speed_t_DoubleSpeed == Copy_StrPtr->usart_speed_slct)
     ef6:	ea 81       	ldd	r30, Y+2	; 0x02
     ef8:	fb 81       	ldd	r31, Y+3	; 0x03
     efa:	84 81       	ldd	r24, Z+4	; 0x04
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	41 f4       	brne	.+16     	; 0xf10 <USART_init+0x82>
		{
			USART_UBRRH_UCSRC = 0;
     f00:	e0 e4       	ldi	r30, 0x40	; 64
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	10 82       	st	Z, r1
			USART_UBRRL = 103;
     f06:	e9 e2       	ldi	r30, 0x29	; 41
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	87 e6       	ldi	r24, 0x67	; 103
     f0c:	80 83       	st	Z, r24
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <USART_init+0x84>
		}
		else{
			Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
     f10:	19 82       	std	Y+1, r1	; 0x01
		Local_ErrorState = USART_Error_t_RT_WRONG_CONFIG;
#error "Wrong Operation Mode"
#endif

		// set the data size
		if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_5)
     f12:	ea 81       	ldd	r30, Y+2	; 0x02
     f14:	fb 81       	ldd	r31, Y+3	; 0x03
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	88 23       	and	r24, r24
     f1a:	21 f1       	breq	.+72     	; 0xf64 <USART_init+0xd6>
		{
			//DoNothing --> Because we can't set URSEL and clear  UCSZ1 and UCSZ0 at the same time.
		}
		else if(Copy_StrPtr->usart_charSize_slct == USART_CharcterSize_t_9)
     f1c:	ea 81       	ldd	r30, Y+2	; 0x02
     f1e:	fb 81       	ldd	r31, Y+3	; 0x03
     f20:	81 81       	ldd	r24, Z+1	; 0x01
     f22:	84 30       	cpi	r24, 0x04	; 4
     f24:	79 f4       	brne	.+30     	; 0xf44 <USART_init+0xb6>
		{
			USART_UCSRB |= (1<<2);
     f26:	aa e2       	ldi	r26, 0x2A	; 42
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ea e2       	ldi	r30, 0x2A	; 42
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	84 60       	ori	r24, 0x04	; 4
     f32:	8c 93       	st	X, r24
			USART_UBRRH_UCSRC |= ((1<<7) | (0b11<<1));
     f34:	a0 e4       	ldi	r26, 0x40	; 64
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	86 68       	ori	r24, 0x86	; 134
     f40:	8c 93       	st	X, r24
     f42:	10 c0       	rjmp	.+32     	; 0xf64 <USART_init+0xd6>
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_charSize_slct << 1));
     f44:	a0 e4       	ldi	r26, 0x40	; 64
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e0 e4       	ldi	r30, 0x40	; 64
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	28 2f       	mov	r18, r24
     f50:	ea 81       	ldd	r30, Y+2	; 0x02
     f52:	fb 81       	ldd	r31, Y+3	; 0x03
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	82 2b       	or	r24, r18
     f62:	8c 93       	st	X, r24
		}


		//set the parity mode
		if(Copy_StrPtr->usart_parity == USART_ParityMode_t_Disable)
     f64:	ea 81       	ldd	r30, Y+2	; 0x02
     f66:	fb 81       	ldd	r31, Y+3	; 0x03
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	88 23       	and	r24, r24
     f6c:	a1 f0       	breq	.+40     	; 0xf96 <USART_init+0x108>
		{
			//DoNothing --> Because we can't set URSEL and clear UPM1 and UPM0 at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1<<7) | (Copy_StrPtr->usart_parity << 4));
     f6e:	a0 e4       	ldi	r26, 0x40	; 64
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e0 e4       	ldi	r30, 0x40	; 64
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	28 2f       	mov	r18, r24
     f7a:	ea 81       	ldd	r30, Y+2	; 0x02
     f7c:	fb 81       	ldd	r31, Y+3	; 0x03
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	82 95       	swap	r24
     f86:	92 95       	swap	r25
     f88:	90 7f       	andi	r25, 0xF0	; 240
     f8a:	98 27       	eor	r25, r24
     f8c:	80 7f       	andi	r24, 0xF0	; 240
     f8e:	98 27       	eor	r25, r24
     f90:	80 68       	ori	r24, 0x80	; 128
     f92:	82 2b       	or	r24, r18
     f94:	8c 93       	st	X, r24
		}

		// set the stop bit
		if(Copy_StrPtr->usart_stopBits_slct == USART_StopBitSlct_t_OneBit)
     f96:	ea 81       	ldd	r30, Y+2	; 0x02
     f98:	fb 81       	ldd	r31, Y+3	; 0x03
     f9a:	83 81       	ldd	r24, Z+3	; 0x03
     f9c:	88 23       	and	r24, r24
     f9e:	39 f0       	breq	.+14     	; 0xfae <USART_init+0x120>
		{
			//DoNothing --> Because we can't set URSEL and clear USBS at the same time.
		}
		else
		{
			USART_UBRRH_UCSRC |= ((1 << 7) | (1 << 3));
     fa0:	a0 e4       	ldi	r26, 0x40	; 64
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e0 e4       	ldi	r30, 0x40	; 64
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	88 68       	ori	r24, 0x88	; 136
     fac:	8c 93       	st	X, r24
		}

		// enable the usart
		USART_UCSRB &= (~(0b11<<3));			//to clear bit3 and bit4
     fae:	aa e2       	ldi	r26, 0x2A	; 42
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	ea e2       	ldi	r30, 0x2A	; 42
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7e       	andi	r24, 0xE7	; 231
     fba:	8c 93       	st	X, r24
		USART_UCSRB |= (Copy_StrPtr->usart_circuit_enable << 3);
     fbc:	aa e2       	ldi	r26, 0x2A	; 42
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	ea e2       	ldi	r30, 0x2A	; 42
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	28 2f       	mov	r18, r24
     fc8:	ea 81       	ldd	r30, Y+2	; 0x02
     fca:	fb 81       	ldd	r31, Y+3	; 0x03
     fcc:	80 81       	ld	r24, Z
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	82 2b       	or	r24, r18
     fe0:	8c 93       	st	X, r24
	}

	return Local_ErrorState;
     fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <USART_SendData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_SendData(s16 Copy_s16Data)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <USART_SendData+0x6>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(USART_UCSRA,5));
    1004:	eb e2       	ldi	r30, 0x2B	; 43
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	82 95       	swap	r24
    100c:	86 95       	lsr	r24
    100e:	87 70       	andi	r24, 0x07	; 7
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	81 70       	andi	r24, 0x01	; 1
    1016:	90 70       	andi	r25, 0x00	; 0
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	a1 f3       	breq	.-24     	; 0x1004 <USART_SendData+0x14>

	USART_UDR = Copy_s16Data;
    101c:	ec e2       	ldi	r30, 0x2C	; 44
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	80 83       	st	Z, r24

	return Local_ErrorState;
    1024:	89 81       	ldd	r24, Y+1	; 0x01

}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <USART_ReceiveData>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData(s16 * Copy_Ps16Data)
{
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <USART_ReceiveData+0x6>
    1038:	0f 92       	push	r0
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9b 83       	std	Y+3, r25	; 0x03
    1040:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	89 83       	std	Y+1, r24	; 0x01

	if(NULL == Copy_Ps16Data)
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	19 f4       	brne	.+6      	; 0x1054 <USART_ReceiveData+0x22>
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
    104e:	82 e0       	ldi	r24, 0x02	; 2
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	0e c0       	rjmp	.+28     	; 0x1070 <USART_ReceiveData+0x3e>
	}
	else
	{
		while(!GET_BIT(USART_UCSRA, 7));
    1054:	eb e2       	ldi	r30, 0x2B	; 43
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	88 23       	and	r24, r24
    105c:	dc f7       	brge	.-10     	; 0x1054 <USART_ReceiveData+0x22>

		*Copy_Ps16Data = (u16)USART_UDR;
    105e:	ec e2       	ldi	r30, 0x2C	; 44
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	88 2f       	mov	r24, r24
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	ea 81       	ldd	r30, Y+2	; 0x02
    106a:	fb 81       	ldd	r31, Y+3	; 0x03
    106c:	91 83       	std	Z+1, r25	; 0x01
    106e:	80 83       	st	Z, r24
	}

	return Local_ErrorState;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <USART_ReceiveData_interrupt>:
/*********************************************************************************************/

/*********************************************************************************************/
USART_Error_t USART_ReceiveData_interrupt(void(* Local_Fptr)(u8))
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <USART_ReceiveData_interrupt+0x6>
    1084:	0f 92       	push	r0
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	9b 83       	std	Y+3, r25	; 0x03
    108c:	8a 83       	std	Y+2, r24	; 0x02
	USART_Error_t Local_ErrorState = USART_Error_t_RT_OK;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != Local_Fptr)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	9b 81       	ldd	r25, Y+3	; 0x03
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	a9 f0       	breq	.+42     	; 0x10c4 <USART_ReceiveData_interrupt+0x46>
	{
		USART_FPTR = Local_Fptr;
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	90 93 8f 01 	sts	0x018F, r25
    10a2:	80 93 8e 01 	sts	0x018E, r24

		//Enable The Global Interrupt
		LIB_SREG |= (1<<7);
    10a6:	af e5       	ldi	r26, 0x5F	; 95
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	ef e5       	ldi	r30, 0x5F	; 95
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 68       	ori	r24, 0x80	; 128
    10b2:	8c 93       	st	X, r24

		//Enable RX Complete Interrupt
		USART_UCSRB |= (1<<7);
    10b4:	aa e2       	ldi	r26, 0x2A	; 42
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	ea e2       	ldi	r30, 0x2A	; 42
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	8c 93       	st	X, r24
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <USART_ReceiveData_interrupt+0x4a>
	}
	else
	{
		Local_ErrorState = USART_Error_t_RT_NULL_PTR;
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ErrorState;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <__vector_13>:
/*********************************************************************************************/

ISR(USART_RXC_vect)
{
    10d6:	1f 92       	push	r1
    10d8:	0f 92       	push	r0
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	0f 92       	push	r0
    10de:	11 24       	eor	r1, r1
    10e0:	2f 93       	push	r18
    10e2:	3f 93       	push	r19
    10e4:	4f 93       	push	r20
    10e6:	5f 93       	push	r21
    10e8:	6f 93       	push	r22
    10ea:	7f 93       	push	r23
    10ec:	8f 93       	push	r24
    10ee:	9f 93       	push	r25
    10f0:	af 93       	push	r26
    10f2:	bf 93       	push	r27
    10f4:	ef 93       	push	r30
    10f6:	ff 93       	push	r31
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_Received_Data = USART_UDR;
    1102:	ec e2       	ldi	r30, 0x2C	; 44
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	89 83       	std	Y+1, r24	; 0x01

	if(NULL != USART_FPTR)
    110a:	80 91 8e 01 	lds	r24, 0x018E
    110e:	90 91 8f 01 	lds	r25, 0x018F
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	31 f0       	breq	.+12     	; 0x1122 <__vector_13+0x4c>
	{
		USART_FPTR(Local_u8_Received_Data);
    1116:	e0 91 8e 01 	lds	r30, 0x018E
    111a:	f0 91 8f 01 	lds	r31, 0x018F
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	09 95       	icall
	}

}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	ff 91       	pop	r31
    112a:	ef 91       	pop	r30
    112c:	bf 91       	pop	r27
    112e:	af 91       	pop	r26
    1130:	9f 91       	pop	r25
    1132:	8f 91       	pop	r24
    1134:	7f 91       	pop	r23
    1136:	6f 91       	pop	r22
    1138:	5f 91       	pop	r21
    113a:	4f 91       	pop	r20
    113c:	3f 91       	pop	r19
    113e:	2f 91       	pop	r18
    1140:	0f 90       	pop	r0
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	0f 90       	pop	r0
    1146:	1f 90       	pop	r1
    1148:	18 95       	reti

0000114a <DIO_u8SetPortDir>:
#include "DIO_reg.h"
#include "DIO_int.h"
#include "DIO_err.h"
#include "../../LIB/BIT_MATH.h"

u8 DIO_u8SetPortDir(u8 Copy_u8Port, u8 Copy_u8Dir){
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	00 d0       	rcall	.+0      	; 0x1150 <DIO_u8SetPortDir+0x6>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <DIO_u8SetPortDir+0x8>
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    1158:	8a 83       	std	Y+2, r24	; 0x02
    115a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_error_status = RT_OK;			//it contains the error number
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port){
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3d 83       	std	Y+5, r19	; 0x05
    1168:	2c 83       	std	Y+4, r18	; 0x04
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	91 05       	cpc	r25, r1
    1172:	d9 f0       	breq	.+54     	; 0x11aa <DIO_u8SetPortDir+0x60>
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	23 30       	cpi	r18, 0x03	; 3
    117a:	31 05       	cpc	r19, r1
    117c:	34 f4       	brge	.+12     	; 0x118a <DIO_u8SetPortDir+0x40>
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	91 05       	cpc	r25, r1
    1186:	61 f0       	breq	.+24     	; 0x11a0 <DIO_u8SetPortDir+0x56>
    1188:	1f c0       	rjmp	.+62     	; 0x11c8 <DIO_u8SetPortDir+0x7e>
    118a:	2c 81       	ldd	r18, Y+4	; 0x04
    118c:	3d 81       	ldd	r19, Y+5	; 0x05
    118e:	23 30       	cpi	r18, 0x03	; 3
    1190:	31 05       	cpc	r19, r1
    1192:	81 f0       	breq	.+32     	; 0x11b4 <DIO_u8SetPortDir+0x6a>
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	91 05       	cpc	r25, r1
    119c:	81 f0       	breq	.+32     	; 0x11be <DIO_u8SetPortDir+0x74>
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <DIO_u8SetPortDir+0x7e>
	case PORTA: DDRA_REG = Copy_u8Dir; break;
    11a0:	ea e3       	ldi	r30, 0x3A	; 58
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	80 83       	st	Z, r24
    11a8:	11 c0       	rjmp	.+34     	; 0x11cc <DIO_u8SetPortDir+0x82>
	case PORTB: DDRB_REG = Copy_u8Dir; break;
    11aa:	e7 e3       	ldi	r30, 0x37	; 55
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	80 83       	st	Z, r24
    11b2:	0c c0       	rjmp	.+24     	; 0x11cc <DIO_u8SetPortDir+0x82>
	case PORTC: DDRC_REG = Copy_u8Dir; break;
    11b4:	e4 e3       	ldi	r30, 0x34	; 52
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	80 83       	st	Z, r24
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <DIO_u8SetPortDir+0x82>
	case PORTD: DDRD_REG = Copy_u8Dir; break;
    11be:	e1 e3       	ldi	r30, 0x31	; 49
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	80 83       	st	Z, r24
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_u8SetPortDir+0x82>
	default: Local_error_status = RT_WRONG_PORT_NO;
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <DIO_u8SetPortVal>:

u8 DIO_u8SetPortVal(u8 Copy_u8Port, u8 Copy_u8val){
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_u8SetPortVal+0x6>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <DIO_u8SetPortVal+0x8>
    11e6:	0f 92       	push	r0
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	8a 83       	std	Y+2, r24	; 0x02
    11ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_error_status = RT_OK;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port){
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3d 83       	std	Y+5, r19	; 0x05
    11fc:	2c 83       	std	Y+4, r18	; 0x04
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	9d 81       	ldd	r25, Y+5	; 0x05
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	91 05       	cpc	r25, r1
    1206:	d9 f0       	breq	.+54     	; 0x123e <DIO_u8SetPortVal+0x60>
    1208:	2c 81       	ldd	r18, Y+4	; 0x04
    120a:	3d 81       	ldd	r19, Y+5	; 0x05
    120c:	23 30       	cpi	r18, 0x03	; 3
    120e:	31 05       	cpc	r19, r1
    1210:	34 f4       	brge	.+12     	; 0x121e <DIO_u8SetPortVal+0x40>
    1212:	8c 81       	ldd	r24, Y+4	; 0x04
    1214:	9d 81       	ldd	r25, Y+5	; 0x05
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	91 05       	cpc	r25, r1
    121a:	61 f0       	breq	.+24     	; 0x1234 <DIO_u8SetPortVal+0x56>
    121c:	1f c0       	rjmp	.+62     	; 0x125c <DIO_u8SetPortVal+0x7e>
    121e:	2c 81       	ldd	r18, Y+4	; 0x04
    1220:	3d 81       	ldd	r19, Y+5	; 0x05
    1222:	23 30       	cpi	r18, 0x03	; 3
    1224:	31 05       	cpc	r19, r1
    1226:	81 f0       	breq	.+32     	; 0x1248 <DIO_u8SetPortVal+0x6a>
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	91 05       	cpc	r25, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <DIO_u8SetPortVal+0x74>
    1232:	14 c0       	rjmp	.+40     	; 0x125c <DIO_u8SetPortVal+0x7e>
	case PORTA: PORTA_REG = Copy_u8val; break;
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	80 83       	st	Z, r24
    123c:	11 c0       	rjmp	.+34     	; 0x1260 <DIO_u8SetPortVal+0x82>
	case PORTB: PORTB_REG = Copy_u8val; break;
    123e:	e8 e3       	ldi	r30, 0x38	; 56
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	80 83       	st	Z, r24
    1246:	0c c0       	rjmp	.+24     	; 0x1260 <DIO_u8SetPortVal+0x82>
	case PORTC: PORTC_REG = Copy_u8val; break;
    1248:	e5 e3       	ldi	r30, 0x35	; 53
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	80 83       	st	Z, r24
    1250:	07 c0       	rjmp	.+14     	; 0x1260 <DIO_u8SetPortVal+0x82>
	case PORTD: PORTD_REG = Copy_u8val; break;
    1252:	e2 e3       	ldi	r30, 0x32	; 50
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	80 83       	st	Z, r24
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8SetPortVal+0x82>
	default: Local_error_status = RT_WRONG_PORT_NO;
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
}
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	08 95       	ret

00001272 <DIO_u8GetPortVal>:

u8 DIO_u8GetPortVal(u8 Copy_u8Port, u8 * Copy_u8Ptr){
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_u8GetPortVal+0x6>
    1278:	00 d0       	rcall	.+0      	; 0x127a <DIO_u8GetPortVal+0x8>
    127a:	00 d0       	rcall	.+0      	; 0x127c <DIO_u8GetPortVal+0xa>
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	8a 83       	std	Y+2, r24	; 0x02
    1282:	7c 83       	std	Y+4, r23	; 0x04
    1284:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_error_status = RT_OK;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8Port){
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3e 83       	std	Y+6, r19	; 0x06
    1292:	2d 83       	std	Y+5, r18	; 0x05
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	91 05       	cpc	r25, r1
    129c:	e9 f0       	breq	.+58     	; 0x12d8 <DIO_u8GetPortVal+0x66>
    129e:	2d 81       	ldd	r18, Y+5	; 0x05
    12a0:	3e 81       	ldd	r19, Y+6	; 0x06
    12a2:	23 30       	cpi	r18, 0x03	; 3
    12a4:	31 05       	cpc	r19, r1
    12a6:	34 f4       	brge	.+12     	; 0x12b4 <DIO_u8GetPortVal+0x42>
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	61 f0       	breq	.+24     	; 0x12ca <DIO_u8GetPortVal+0x58>
    12b2:	27 c0       	rjmp	.+78     	; 0x1302 <DIO_u8GetPortVal+0x90>
    12b4:	2d 81       	ldd	r18, Y+5	; 0x05
    12b6:	3e 81       	ldd	r19, Y+6	; 0x06
    12b8:	23 30       	cpi	r18, 0x03	; 3
    12ba:	31 05       	cpc	r19, r1
    12bc:	a1 f0       	breq	.+40     	; 0x12e6 <DIO_u8GetPortVal+0x74>
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	91 05       	cpc	r25, r1
    12c6:	b1 f0       	breq	.+44     	; 0x12f4 <DIO_u8GetPortVal+0x82>
    12c8:	1c c0       	rjmp	.+56     	; 0x1302 <DIO_u8GetPortVal+0x90>
	case PORTA: * Copy_u8Ptr = PINA_REG; break;			//to store the port value in the given address
    12ca:	e9 e3       	ldi	r30, 0x39	; 57
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	eb 81       	ldd	r30, Y+3	; 0x03
    12d2:	fc 81       	ldd	r31, Y+4	; 0x04
    12d4:	80 83       	st	Z, r24
    12d6:	17 c0       	rjmp	.+46     	; 0x1306 <DIO_u8GetPortVal+0x94>
	case PORTB: * Copy_u8Ptr = PINB_REG; break;
    12d8:	e6 e3       	ldi	r30, 0x36	; 54
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	eb 81       	ldd	r30, Y+3	; 0x03
    12e0:	fc 81       	ldd	r31, Y+4	; 0x04
    12e2:	80 83       	st	Z, r24
    12e4:	10 c0       	rjmp	.+32     	; 0x1306 <DIO_u8GetPortVal+0x94>
	case PORTC: * Copy_u8Ptr = PINC_REG; break;
    12e6:	e3 e3       	ldi	r30, 0x33	; 51
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	eb 81       	ldd	r30, Y+3	; 0x03
    12ee:	fc 81       	ldd	r31, Y+4	; 0x04
    12f0:	80 83       	st	Z, r24
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <DIO_u8GetPortVal+0x94>
	case PORTD: * Copy_u8Ptr = PIND_REG; break;
    12f4:	e0 e3       	ldi	r30, 0x30	; 48
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	eb 81       	ldd	r30, Y+3	; 0x03
    12fc:	fc 81       	ldd	r31, Y+4	; 0x04
    12fe:	80 83       	st	Z, r24
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <DIO_u8GetPortVal+0x94>
	default: Local_error_status = RT_WRONG_PORT_NO;
    1302:	82 e0       	ldi	r24, 0x02	; 2
    1304:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
}
    1308:	26 96       	adiw	r28, 0x06	; 6
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <DIO_u8SetPinDir>:

u8 DIO_u8SetPinDir(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Dir){
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <DIO_u8SetPinDir+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_u8SetPinDir+0x8>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_u8SetPinDir+0xa>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
    132a:	6b 83       	std	Y+3, r22	; 0x03
    132c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_error_status = RT_OK;
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin >= PIN0 && Copy_u8Pin <= PIN7){
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 30       	cpi	r24, 0x08	; 8
    1336:	08 f0       	brcs	.+2      	; 0x133a <DIO_u8SetPinDir+0x20>
    1338:	ee c0       	rjmp	.+476    	; 0x1516 <DIO_u8SetPinDir+0x1fc>
		switch(Copy_u8Port){
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3e 83       	std	Y+6, r19	; 0x06
    1342:	2d 83       	std	Y+5, r18	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	91 05       	cpc	r25, r1
    134c:	09 f4       	brne	.+2      	; 0x1350 <DIO_u8SetPinDir+0x36>
    134e:	4a c0       	rjmp	.+148    	; 0x13e4 <DIO_u8SetPinDir+0xca>
    1350:	2d 81       	ldd	r18, Y+5	; 0x05
    1352:	3e 81       	ldd	r19, Y+6	; 0x06
    1354:	23 30       	cpi	r18, 0x03	; 3
    1356:	31 05       	cpc	r19, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <DIO_u8SetPinDir+0x4c>
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	71 f0       	breq	.+28     	; 0x1380 <DIO_u8SetPinDir+0x66>
    1364:	d5 c0       	rjmp	.+426    	; 0x1510 <DIO_u8SetPinDir+0x1f6>
    1366:	2d 81       	ldd	r18, Y+5	; 0x05
    1368:	3e 81       	ldd	r19, Y+6	; 0x06
    136a:	23 30       	cpi	r18, 0x03	; 3
    136c:	31 05       	cpc	r19, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <DIO_u8SetPinDir+0x58>
    1370:	6b c0       	rjmp	.+214    	; 0x1448 <DIO_u8SetPinDir+0x12e>
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	91 05       	cpc	r25, r1
    137a:	09 f4       	brne	.+2      	; 0x137e <DIO_u8SetPinDir+0x64>
    137c:	97 c0       	rjmp	.+302    	; 0x14ac <DIO_u8SetPinDir+0x192>
    137e:	c8 c0       	rjmp	.+400    	; 0x1510 <DIO_u8SetPinDir+0x1f6>
		case PORTA:
			if(Copy_u8Dir == INPUT){
    1380:	8c 81       	ldd	r24, Y+4	; 0x04
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	a9 f4       	brne	.+42     	; 0x13b0 <DIO_u8SetPinDir+0x96>
				CLR_BIT(DDRA_REG, Copy_u8Pin);  //to set this pin as input
    1386:	aa e3       	ldi	r26, 0x3A	; 58
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	ea e3       	ldi	r30, 0x3A	; 58
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_u8SetPinDir+0x8a>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_u8SetPinDir+0x86>
    13a8:	80 95       	com	r24
    13aa:	84 23       	and	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	b5 c0       	rjmp	.+362    	; 0x151a <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	a1 f4       	brne	.+40     	; 0x13de <DIO_u8SetPinDir+0xc4>
				SET_BIT(DDRA_REG, Copy_u8Pin);	//to set this pin as output
    13b6:	aa e3       	ldi	r26, 0x3A	; 58
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ea e3       	ldi	r30, 0x3A	; 58
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	48 2f       	mov	r20, r24
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 2e       	mov	r0, r18
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <DIO_u8SetPinDir+0xba>
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	0a 94       	dec	r0
    13d6:	e2 f7       	brpl	.-8      	; 0x13d0 <DIO_u8SetPinDir+0xb6>
    13d8:	84 2b       	or	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	9e c0       	rjmp	.+316    	; 0x151a <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	9b c0       	rjmp	.+310    	; 0x151a <DIO_u8SetPinDir+0x200>
			}
			break;
		case PORTB:
			if(Copy_u8Dir == INPUT){
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	a9 f4       	brne	.+42     	; 0x1414 <DIO_u8SetPinDir+0xfa>
				CLR_BIT(DDRB_REG, Copy_u8Pin);
    13ea:	a7 e3       	ldi	r26, 0x37	; 55
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e7 e3       	ldi	r30, 0x37	; 55
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8SetPinDir+0xee>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_u8SetPinDir+0xea>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	83 c0       	rjmp	.+262    	; 0x151a <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	a1 f4       	brne	.+40     	; 0x1442 <DIO_u8SetPinDir+0x128>
				SET_BIT(DDRB_REG, Copy_u8Pin);
    141a:	a7 e3       	ldi	r26, 0x37	; 55
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e7 e3       	ldi	r30, 0x37	; 55
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_u8SetPinDir+0x11e>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_u8SetPinDir+0x11a>
    143c:	84 2b       	or	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	6c c0       	rjmp	.+216    	; 0x151a <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    1442:	84 e0       	ldi	r24, 0x04	; 4
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	69 c0       	rjmp	.+210    	; 0x151a <DIO_u8SetPinDir+0x200>
			}
			break;
		case PORTC:
			if(Copy_u8Dir == INPUT){
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	a9 f4       	brne	.+42     	; 0x1478 <DIO_u8SetPinDir+0x15e>
				CLR_BIT(DDRC_REG, Copy_u8Pin);
    144e:	a4 e3       	ldi	r26, 0x34	; 52
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e4 e3       	ldi	r30, 0x34	; 52
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_u8SetPinDir+0x152>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_u8SetPinDir+0x14e>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	51 c0       	rjmp	.+162    	; 0x151a <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	82 30       	cpi	r24, 0x02	; 2
    147c:	a1 f4       	brne	.+40     	; 0x14a6 <DIO_u8SetPinDir+0x18c>
				SET_BIT(DDRC_REG, Copy_u8Pin);
    147e:	a4 e3       	ldi	r26, 0x34	; 52
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e4 e3       	ldi	r30, 0x34	; 52
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_u8SetPinDir+0x182>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_u8SetPinDir+0x17e>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	3a c0       	rjmp	.+116    	; 0x151a <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    14a6:	84 e0       	ldi	r24, 0x04	; 4
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	37 c0       	rjmp	.+110    	; 0x151a <DIO_u8SetPinDir+0x200>
			}
			break;
		case PORTD:
			if(Copy_u8Dir == INPUT){
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	a9 f4       	brne	.+42     	; 0x14dc <DIO_u8SetPinDir+0x1c2>
				CLR_BIT(DDRD_REG, Copy_u8Pin);
    14b2:	a1 e3       	ldi	r26, 0x31	; 49
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e1 e3       	ldi	r30, 0x31	; 49
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_u8SetPinDir+0x1b6>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_u8SetPinDir+0x1b2>
    14d4:	80 95       	com	r24
    14d6:	84 23       	and	r24, r20
    14d8:	8c 93       	st	X, r24
    14da:	1f c0       	rjmp	.+62     	; 0x151a <DIO_u8SetPinDir+0x200>
			}else if(Copy_u8Dir == OUTPUT){
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	a1 f4       	brne	.+40     	; 0x150a <DIO_u8SetPinDir+0x1f0>
				SET_BIT(DDRD_REG, Copy_u8Pin);
    14e2:	a1 e3       	ldi	r26, 0x31	; 49
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e1 e3       	ldi	r30, 0x31	; 49
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_u8SetPinDir+0x1e6>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_u8SetPinDir+0x1e2>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	08 c0       	rjmp	.+16     	; 0x151a <DIO_u8SetPinDir+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_DIRECTION;
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	05 c0       	rjmp	.+10     	; 0x151a <DIO_u8SetPinDir+0x200>
			}
			break;
		default: Local_error_status= RT_WRONG_PORT_NO;
    1510:	82 e0       	ldi	r24, 0x02	; 2
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_u8SetPinDir+0x200>
		}
	}else{
		Local_error_status = RT_WRONG_PIN_NO;
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    151a:	89 81       	ldd	r24, Y+1	; 0x01
}
    151c:	26 96       	adiw	r28, 0x06	; 6
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	cf 91       	pop	r28
    152a:	df 91       	pop	r29
    152c:	08 95       	ret

0000152e <DIO_u8SetPinVal>:

u8 DIO_u8SetPinVal(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Val){
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	00 d0       	rcall	.+0      	; 0x1534 <DIO_u8SetPinVal+0x6>
    1534:	00 d0       	rcall	.+0      	; 0x1536 <DIO_u8SetPinVal+0x8>
    1536:	00 d0       	rcall	.+0      	; 0x1538 <DIO_u8SetPinVal+0xa>
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	8a 83       	std	Y+2, r24	; 0x02
    153e:	6b 83       	std	Y+3, r22	; 0x03
    1540:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_error_status = RT_OK;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin >= PIN0 && Copy_u8Pin <= PIN7){
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	88 30       	cpi	r24, 0x08	; 8
    154a:	08 f0       	brcs	.+2      	; 0x154e <DIO_u8SetPinVal+0x20>
    154c:	ee c0       	rjmp	.+476    	; 0x172a <DIO_u8SetPinVal+0x1fc>
		switch(Copy_u8Port){
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	3e 83       	std	Y+6, r19	; 0x06
    1556:	2d 83       	std	Y+5, r18	; 0x05
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	91 05       	cpc	r25, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <DIO_u8SetPinVal+0x36>
    1562:	4a c0       	rjmp	.+148    	; 0x15f8 <DIO_u8SetPinVal+0xca>
    1564:	2d 81       	ldd	r18, Y+5	; 0x05
    1566:	3e 81       	ldd	r19, Y+6	; 0x06
    1568:	23 30       	cpi	r18, 0x03	; 3
    156a:	31 05       	cpc	r19, r1
    156c:	34 f4       	brge	.+12     	; 0x157a <DIO_u8SetPinVal+0x4c>
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	91 05       	cpc	r25, r1
    1576:	71 f0       	breq	.+28     	; 0x1594 <DIO_u8SetPinVal+0x66>
    1578:	d5 c0       	rjmp	.+426    	; 0x1724 <DIO_u8SetPinVal+0x1f6>
    157a:	2d 81       	ldd	r18, Y+5	; 0x05
    157c:	3e 81       	ldd	r19, Y+6	; 0x06
    157e:	23 30       	cpi	r18, 0x03	; 3
    1580:	31 05       	cpc	r19, r1
    1582:	09 f4       	brne	.+2      	; 0x1586 <DIO_u8SetPinVal+0x58>
    1584:	6b c0       	rjmp	.+214    	; 0x165c <DIO_u8SetPinVal+0x12e>
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	84 30       	cpi	r24, 0x04	; 4
    158c:	91 05       	cpc	r25, r1
    158e:	09 f4       	brne	.+2      	; 0x1592 <DIO_u8SetPinVal+0x64>
    1590:	97 c0       	rjmp	.+302    	; 0x16c0 <DIO_u8SetPinVal+0x192>
    1592:	c8 c0       	rjmp	.+400    	; 0x1724 <DIO_u8SetPinVal+0x1f6>
		case PORTA:
			if(Copy_u8Val == LOW){
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a9 f4       	brne	.+42     	; 0x15c4 <DIO_u8SetPinVal+0x96>
				CLR_BIT(PORTA_REG, Copy_u8Pin);		//to make this pin low
    159a:	ab e3       	ldi	r26, 0x3B	; 59
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	eb e3       	ldi	r30, 0x3B	; 59
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <DIO_u8SetPinVal+0x8a>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <DIO_u8SetPinVal+0x86>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	b5 c0       	rjmp	.+362    	; 0x172e <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	82 30       	cpi	r24, 0x02	; 2
    15c8:	a1 f4       	brne	.+40     	; 0x15f2 <DIO_u8SetPinVal+0xc4>
				SET_BIT(PORTA_REG, Copy_u8Pin);		//to make this pin high
    15ca:	ab e3       	ldi	r26, 0x3B	; 59
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_u8SetPinVal+0xba>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_u8SetPinVal+0xb6>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	9e c0       	rjmp	.+316    	; 0x172e <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    15f2:	85 e0       	ldi	r24, 0x05	; 5
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	9b c0       	rjmp	.+310    	; 0x172e <DIO_u8SetPinVal+0x200>
			}
			break;
		case PORTB:
			if(Copy_u8Val == LOW){
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	a9 f4       	brne	.+42     	; 0x1628 <DIO_u8SetPinVal+0xfa>
				CLR_BIT(PORTB_REG, Copy_u8Pin);
    15fe:	a8 e3       	ldi	r26, 0x38	; 56
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e8 e3       	ldi	r30, 0x38	; 56
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_u8SetPinVal+0xee>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_u8SetPinVal+0xea>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	83 c0       	rjmp	.+262    	; 0x172e <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	a1 f4       	brne	.+40     	; 0x1656 <DIO_u8SetPinVal+0x128>
				SET_BIT(PORTB_REG, Copy_u8Pin);
    162e:	a8 e3       	ldi	r26, 0x38	; 56
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e8 e3       	ldi	r30, 0x38	; 56
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_u8SetPinVal+0x11e>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <DIO_u8SetPinVal+0x11a>
    1650:	84 2b       	or	r24, r20
    1652:	8c 93       	st	X, r24
    1654:	6c c0       	rjmp	.+216    	; 0x172e <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	69 c0       	rjmp	.+210    	; 0x172e <DIO_u8SetPinVal+0x200>
			}
			break;
		case PORTC:
			if(Copy_u8Val == LOW){
    165c:	8c 81       	ldd	r24, Y+4	; 0x04
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	a9 f4       	brne	.+42     	; 0x168c <DIO_u8SetPinVal+0x15e>
				CLR_BIT(PORTC_REG, Copy_u8Pin);
    1662:	a5 e3       	ldi	r26, 0x35	; 53
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e3       	ldi	r30, 0x35	; 53
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_u8SetPinVal+0x152>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_u8SetPinVal+0x14e>
    1684:	80 95       	com	r24
    1686:	84 23       	and	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	51 c0       	rjmp	.+162    	; 0x172e <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	a1 f4       	brne	.+40     	; 0x16ba <DIO_u8SetPinVal+0x18c>
				SET_BIT(PORTC_REG, Copy_u8Pin);
    1692:	a5 e3       	ldi	r26, 0x35	; 53
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e3       	ldi	r30, 0x35	; 53
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8SetPinVal+0x182>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_u8SetPinVal+0x17e>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	3a c0       	rjmp	.+116    	; 0x172e <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    16ba:	85 e0       	ldi	r24, 0x05	; 5
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	37 c0       	rjmp	.+110    	; 0x172e <DIO_u8SetPinVal+0x200>
			}
			break;
		case PORTD:
			if(Copy_u8Val == LOW){
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	a9 f4       	brne	.+42     	; 0x16f0 <DIO_u8SetPinVal+0x1c2>
				CLR_BIT(PORTD_REG, Copy_u8Pin);
    16c6:	a2 e3       	ldi	r26, 0x32	; 50
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e2 e3       	ldi	r30, 0x32	; 50
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <DIO_u8SetPinVal+0x1b6>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <DIO_u8SetPinVal+0x1b2>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	1f c0       	rjmp	.+62     	; 0x172e <DIO_u8SetPinVal+0x200>
			}else if(Copy_u8Val == HIGH){
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	a1 f4       	brne	.+40     	; 0x171e <DIO_u8SetPinVal+0x1f0>
				SET_BIT(PORTD_REG, Copy_u8Pin);
    16f6:	a2 e3       	ldi	r26, 0x32	; 50
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e2 e3       	ldi	r30, 0x32	; 50
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	48 2f       	mov	r20, r24
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	28 2f       	mov	r18, r24
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	02 2e       	mov	r0, r18
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <DIO_u8SetPinVal+0x1e6>
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <DIO_u8SetPinVal+0x1e2>
    1718:	84 2b       	or	r24, r20
    171a:	8c 93       	st	X, r24
    171c:	08 c0       	rjmp	.+16     	; 0x172e <DIO_u8SetPinVal+0x200>
			}else{
				Local_error_status = RT_WRONG_PIN_VALUE;
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	05 c0       	rjmp	.+10     	; 0x172e <DIO_u8SetPinVal+0x200>
			}
			break;
		default: Local_error_status= RT_WRONG_PORT_NO;
    1724:	82 e0       	ldi	r24, 0x02	; 2
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	02 c0       	rjmp	.+4      	; 0x172e <DIO_u8SetPinVal+0x200>
		}
	}else{
		Local_error_status = RT_WRONG_PIN_NO;
    172a:	83 e0       	ldi	r24, 0x03	; 3
    172c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    172e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1730:	26 96       	adiw	r28, 0x06	; 6
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 Copy_u8Port, u8 Copy_u8Pin, u8 * Copy_u8Ptr){
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
    174a:	27 97       	sbiw	r28, 0x07	; 7
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	de bf       	out	0x3e, r29	; 62
    1752:	0f be       	out	0x3f, r0	; 63
    1754:	cd bf       	out	0x3d, r28	; 61
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	6b 83       	std	Y+3, r22	; 0x03
    175a:	5d 83       	std	Y+5, r21	; 0x05
    175c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_error_status = RT_OK;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Pin >= PIN0 && Copy_u8Pin <= PIN7){
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	08 f0       	brcs	.+2      	; 0x176a <DIO_u8GetPinVal+0x28>
    1768:	74 c0       	rjmp	.+232    	; 0x1852 <DIO_u8GetPinVal+0x110>
		switch(Copy_u8Port){
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	3f 83       	std	Y+7, r19	; 0x07
    1772:	2e 83       	std	Y+6, r18	; 0x06
    1774:	4e 81       	ldd	r20, Y+6	; 0x06
    1776:	5f 81       	ldd	r21, Y+7	; 0x07
    1778:	42 30       	cpi	r20, 0x02	; 2
    177a:	51 05       	cpc	r21, r1
    177c:	59 f1       	breq	.+86     	; 0x17d4 <DIO_u8GetPinVal+0x92>
    177e:	8e 81       	ldd	r24, Y+6	; 0x06
    1780:	9f 81       	ldd	r25, Y+7	; 0x07
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	91 05       	cpc	r25, r1
    1786:	34 f4       	brge	.+12     	; 0x1794 <DIO_u8GetPinVal+0x52>
    1788:	2e 81       	ldd	r18, Y+6	; 0x06
    178a:	3f 81       	ldd	r19, Y+7	; 0x07
    178c:	21 30       	cpi	r18, 0x01	; 1
    178e:	31 05       	cpc	r19, r1
    1790:	69 f0       	breq	.+26     	; 0x17ac <DIO_u8GetPinVal+0x6a>
    1792:	5c c0       	rjmp	.+184    	; 0x184c <DIO_u8GetPinVal+0x10a>
    1794:	4e 81       	ldd	r20, Y+6	; 0x06
    1796:	5f 81       	ldd	r21, Y+7	; 0x07
    1798:	43 30       	cpi	r20, 0x03	; 3
    179a:	51 05       	cpc	r21, r1
    179c:	79 f1       	breq	.+94     	; 0x17fc <DIO_u8GetPinVal+0xba>
    179e:	8e 81       	ldd	r24, Y+6	; 0x06
    17a0:	9f 81       	ldd	r25, Y+7	; 0x07
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <DIO_u8GetPinVal+0x68>
    17a8:	3d c0       	rjmp	.+122    	; 0x1824 <DIO_u8GetPinVal+0xe2>
    17aa:	50 c0       	rjmp	.+160    	; 0x184c <DIO_u8GetPinVal+0x10a>
		case PORTA: * Copy_u8Ptr = GET_BIT(PINA_REG, Copy_u8Pin); break;		//to store the pin value in the given address
    17ac:	e9 e3       	ldi	r30, 0x39	; 57
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a9 01       	movw	r20, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <DIO_u8GetPinVal+0x82>
    17c0:	55 95       	asr	r21
    17c2:	47 95       	ror	r20
    17c4:	8a 95       	dec	r24
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <DIO_u8GetPinVal+0x7e>
    17c8:	ca 01       	movw	r24, r20
    17ca:	81 70       	andi	r24, 0x01	; 1
    17cc:	ec 81       	ldd	r30, Y+4	; 0x04
    17ce:	fd 81       	ldd	r31, Y+5	; 0x05
    17d0:	80 83       	st	Z, r24
    17d2:	41 c0       	rjmp	.+130    	; 0x1856 <DIO_u8GetPinVal+0x114>
		case PORTB: * Copy_u8Ptr = GET_BIT(PINB_REG, Copy_u8Pin); break;
    17d4:	e6 e3       	ldi	r30, 0x36	; 54
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a9 01       	movw	r20, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_u8GetPinVal+0xaa>
    17e8:	55 95       	asr	r21
    17ea:	47 95       	ror	r20
    17ec:	8a 95       	dec	r24
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_u8GetPinVal+0xa6>
    17f0:	ca 01       	movw	r24, r20
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	ec 81       	ldd	r30, Y+4	; 0x04
    17f6:	fd 81       	ldd	r31, Y+5	; 0x05
    17f8:	80 83       	st	Z, r24
    17fa:	2d c0       	rjmp	.+90     	; 0x1856 <DIO_u8GetPinVal+0x114>
		case PORTC: * Copy_u8Ptr = GET_BIT(PINC_REG, Copy_u8Pin); break;
    17fc:	e3 e3       	ldi	r30, 0x33	; 51
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	88 2f       	mov	r24, r24
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a9 01       	movw	r20, r18
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_u8GetPinVal+0xd2>
    1810:	55 95       	asr	r21
    1812:	47 95       	ror	r20
    1814:	8a 95       	dec	r24
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <DIO_u8GetPinVal+0xce>
    1818:	ca 01       	movw	r24, r20
    181a:	81 70       	andi	r24, 0x01	; 1
    181c:	ec 81       	ldd	r30, Y+4	; 0x04
    181e:	fd 81       	ldd	r31, Y+5	; 0x05
    1820:	80 83       	st	Z, r24
    1822:	19 c0       	rjmp	.+50     	; 0x1856 <DIO_u8GetPinVal+0x114>
		case PORTD: * Copy_u8Ptr = GET_BIT(PIND_REG, Copy_u8Pin); break;
    1824:	e0 e3       	ldi	r30, 0x30	; 48
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a9 01       	movw	r20, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_u8GetPinVal+0xfa>
    1838:	55 95       	asr	r21
    183a:	47 95       	ror	r20
    183c:	8a 95       	dec	r24
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_u8GetPinVal+0xf6>
    1840:	ca 01       	movw	r24, r20
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	ec 81       	ldd	r30, Y+4	; 0x04
    1846:	fd 81       	ldd	r31, Y+5	; 0x05
    1848:	80 83       	st	Z, r24
    184a:	05 c0       	rjmp	.+10     	; 0x1856 <DIO_u8GetPinVal+0x114>
		default: Local_error_status = RT_WRONG_PORT_NO;
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_u8GetPinVal+0x114>
		}
	}else{
		Local_error_status = RT_WRONG_PIN_NO;
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_error_status;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
}
    1858:	27 96       	adiw	r28, 0x07	; 7
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <__vector_16>:
#define ADC_TRIGGER_SOURCE_MASK		(u8)0b00011111
#define ADC_INPUT_CHANNEL_MASK		(u8)0b11100000

void (* ADC_CALL_BCK_PTR)(void) = NULL;

ISR(ADC_vect){
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	4f 93       	push	r20
    187a:	5f 93       	push	r21
    187c:	6f 93       	push	r22
    187e:	7f 93       	push	r23
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	af 93       	push	r26
    1886:	bf 93       	push	r27
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CALL_BCK_PTR != NULL){
    1894:	80 91 90 01 	lds	r24, 0x0190
    1898:	90 91 91 01 	lds	r25, 0x0191
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	29 f0       	breq	.+10     	; 0x18aa <__vector_16+0x40>
		ADC_CALL_BCK_PTR();
    18a0:	e0 91 90 01 	lds	r30, 0x0190
    18a4:	f0 91 91 01 	lds	r31, 0x0191
    18a8:	09 95       	icall
	}
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	ff 91       	pop	r31
    18b0:	ef 91       	pop	r30
    18b2:	bf 91       	pop	r27
    18b4:	af 91       	pop	r26
    18b6:	9f 91       	pop	r25
    18b8:	8f 91       	pop	r24
    18ba:	7f 91       	pop	r23
    18bc:	6f 91       	pop	r22
    18be:	5f 91       	pop	r21
    18c0:	4f 91       	pop	r20
    18c2:	3f 91       	pop	r19
    18c4:	2f 91       	pop	r18
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	0f 90       	pop	r0
    18cc:	1f 90       	pop	r1
    18ce:	18 95       	reti

000018d0 <ADC_vidInit>:

void ADC_vidInit(void){
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	//set supply voltage reference
#if VOLTAGE_REFERENCE == ADC_REF_VOLTAGE_AREF
	CLR_BIT(ADC_ADMUX_REG, ADMUX_REFS0_BIT);
	CLR_BIT(ADC_ADMUX_REG, ADMUX_REFS1_BIT);
#elif VOLTAGE_REFERENCE == ADC_REF_VOLTAGE_AVCC
	SET_BIT(ADC_ADMUX_REG, ADMUX_REFS0_BIT);
    18d8:	a7 e2       	ldi	r26, 0x27	; 39
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e7 e2       	ldi	r30, 0x27	; 39
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 64       	ori	r24, 0x40	; 64
    18e4:	8c 93       	st	X, r24
	CLR_BIT(ADC_ADMUX_REG, ADMUX_REFS1_BIT);
    18e6:	a7 e2       	ldi	r26, 0x27	; 39
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e7 e2       	ldi	r30, 0x27	; 39
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 77       	andi	r24, 0x7F	; 127
    18f2:	8c 93       	st	X, r24
#else
#error "Wrong Reference voltage !"
#endif

	//set the prescaler
	ADC_ADCSRA_REG &= ADC_PRESCALER_MASK;
    18f4:	a6 e2       	ldi	r26, 0x26	; 38
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e6 e2       	ldi	r30, 0x26	; 38
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 7f       	andi	r24, 0xF8	; 248
    1900:	8c 93       	st	X, r24
	ADC_ADCSRA_REG |= PRESCALER;
    1902:	a6 e2       	ldi	r26, 0x26	; 38
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e6 e2       	ldi	r30, 0x26	; 38
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	86 60       	ori	r24, 0x06	; 6
    190e:	8c 93       	st	X, r24

	//enable the ADC
	SET_BIT(ADC_ADCSRA_REG, ADCSRA_ADEN_BIT);
    1910:	a6 e2       	ldi	r26, 0x26	; 38
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e6 e2       	ldi	r30, 0x26	; 38
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	8c 93       	st	X, r24

}
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <ADC_vidStartSignleConv>:

void ADC_vidStartSignleConv(e_ADC_channel_opt Copy_e_ADC_channel_opt_channel){
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	0f 92       	push	r0
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
	//choose the input channel
	ADC_ADMUX_REG &= ADC_INPUT_CHANNEL_MASK;
    1930:	a7 e2       	ldi	r26, 0x27	; 39
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e7 e2       	ldi	r30, 0x27	; 39
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	80 7e       	andi	r24, 0xE0	; 224
    193c:	8c 93       	st	X, r24
	ADC_ADMUX_REG |= Copy_e_ADC_channel_opt_channel;
    193e:	a7 e2       	ldi	r26, 0x27	; 39
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e7 e2       	ldi	r30, 0x27	; 39
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	90 81       	ld	r25, Z
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	89 2b       	or	r24, r25
    194c:	8c 93       	st	X, r24

	//start a single conversion
	SET_BIT(ADC_ADCSRA_REG, ADCSRA_ADSC_BIT);
    194e:	a6 e2       	ldi	r26, 0x26	; 38
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e6 e2       	ldi	r30, 0x26	; 38
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	80 64       	ori	r24, 0x40	; 64
    195a:	8c 93       	st	X, r24
}
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <ADC_vidStartAutoTriggeredConv>:

void ADC_vidStartAutoTriggeredConv(e_ADC_trigger_source Copy_e_ADC_trigger_source_TriggerSrc, e_ADC_channel_opt Copy_e_ADC_channel_opt_channel){
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <ADC_vidStartAutoTriggeredConv+0x6>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	6a 83       	std	Y+2, r22	; 0x02
	//choose the input channel
	ADC_ADMUX_REG &= ADC_INPUT_CHANNEL_MASK;
    1972:	a7 e2       	ldi	r26, 0x27	; 39
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e7 e2       	ldi	r30, 0x27	; 39
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 7e       	andi	r24, 0xE0	; 224
    197e:	8c 93       	st	X, r24
	ADC_ADMUX_REG |= Copy_e_ADC_channel_opt_channel;
    1980:	a7 e2       	ldi	r26, 0x27	; 39
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e7 e2       	ldi	r30, 0x27	; 39
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	90 81       	ld	r25, Z
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	89 2b       	or	r24, r25
    198e:	8c 93       	st	X, r24

	//set the trigger source and start the conversion process
	ADC_SFIOR_REG &= ADC_TRIGGER_SOURCE_MASK;
    1990:	a0 e5       	ldi	r26, 0x50	; 80
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	e0 e5       	ldi	r30, 0x50	; 80
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	8f 71       	andi	r24, 0x1F	; 31
    199c:	8c 93       	st	X, r24
	ADC_SFIOR_REG |= (Copy_e_ADC_trigger_source_TriggerSrc << 5);
    199e:	a0 e5       	ldi	r26, 0x50	; 80
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e0 e5       	ldi	r30, 0x50	; 80
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	88 2f       	mov	r24, r24
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	88 0f       	add	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	82 95       	swap	r24
    19b6:	92 95       	swap	r25
    19b8:	90 7f       	andi	r25, 0xF0	; 240
    19ba:	98 27       	eor	r25, r24
    19bc:	80 7f       	andi	r24, 0xF0	; 240
    19be:	98 27       	eor	r25, r24
    19c0:	82 2b       	or	r24, r18
    19c2:	8c 93       	st	X, r24

	//enable the auto trigger
	SET_BIT(ADC_ADCSRA_REG, ADCSRA_ADATE_BIT);
    19c4:	a6 e2       	ldi	r26, 0x26	; 38
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e6 e2       	ldi	r30, 0x26	; 38
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	80 62       	ori	r24, 0x20	; 32
    19d0:	8c 93       	st	X, r24

	//start the first conversion
	SET_BIT(ADC_ADCSRA_REG, ADCSRA_ADSC_BIT);
    19d2:	a6 e2       	ldi	r26, 0x26	; 38
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e6 e2       	ldi	r30, 0x26	; 38
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 64       	ori	r24, 0x40	; 64
    19de:	8c 93       	st	X, r24
}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <ADC_f32GetAnalogValue_mv>:

f32 ADC_f32GetAnalogValue_mv(void){
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	2c 97       	sbiw	r28, 0x0c	; 12
    19f4:	0f b6       	in	r0, 0x3f	; 63
    19f6:	f8 94       	cli
    19f8:	de bf       	out	0x3e, r29	; 62
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	cd bf       	out	0x3d, r28	; 61
	f32 local_f32AnalogVoltage_mv = 0;
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a0 e0       	ldi	r26, 0x00	; 0
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	89 87       	std	Y+9, r24	; 0x09
    1a08:	9a 87       	std	Y+10, r25	; 0x0a
    1a0a:	ab 87       	std	Y+11, r26	; 0x0b
    1a0c:	bc 87       	std	Y+12, r27	; 0x0c
	f32 local_f32RefVoltage_mv = 0;
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	af 83       	std	Y+7, r26	; 0x07
    1a1c:	b8 87       	std	Y+8, r27	; 0x08
	f32 local_f32Step_mv = 0;
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e0       	ldi	r26, 0x00	; 0
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	ab 83       	std	Y+3, r26	; 0x03
    1a2c:	bc 83       	std	Y+4, r27	; 0x04
#if VOLTAGE_REFERENCE == ADC_REF_VOLTAGE_AVCC
	local_f32RefVoltage_mv = ((f32)AVCC) * 1000;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e4       	ldi	r25, 0x40	; 64
    1a32:	ac e9       	ldi	r26, 0x9C	; 156
    1a34:	b5 e4       	ldi	r27, 0x45	; 69
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	af 83       	std	Y+7, r26	; 0x07
    1a3c:	b8 87       	std	Y+8, r27	; 0x08
#error "Wrong Reference voltage !"
#endif

	//Set the adjustment direction
#if RESOLUTION == ADC_RESOLUTION_10
	CLR_BIT(ADC_ADMUX_REG, ADMUX_ADLAR_BIT);			//the result is right adjusted
    1a3e:	a7 e2       	ldi	r26, 0x27	; 39
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e2       	ldi	r30, 0x27	; 39
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8f 7d       	andi	r24, 0xDF	; 223
    1a4a:	8c 93       	st	X, r24
	local_f32Step_mv = local_f32RefVoltage_mv / 1024;
    1a4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a50:	8f 81       	ldd	r24, Y+7	; 0x07
    1a52:	98 85       	ldd	r25, Y+8	; 0x08
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e8       	ldi	r20, 0x80	; 128
    1a5a:	54 e4       	ldi	r21, 0x44	; 68
    1a5c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	ab 83       	std	Y+3, r26	; 0x03
    1a6a:	bc 83       	std	Y+4, r27	; 0x04
	while(ADCSRA_ADIF_BIT == 0);
	local_f32AnalogVoltage_mv = ADC_DATA_REG * local_f32Step_mv;
    1a6c:	e4 e2       	ldi	r30, 0x24	; 36
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	cc 01       	movw	r24, r24
    1a76:	a0 e0       	ldi	r26, 0x00	; 0
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	bc 01       	movw	r22, r24
    1a88:	cd 01       	movw	r24, r26
    1a8a:	29 81       	ldd	r18, Y+1	; 0x01
    1a8c:	3a 81       	ldd	r19, Y+2	; 0x02
    1a8e:	4b 81       	ldd	r20, Y+3	; 0x03
    1a90:	5c 81       	ldd	r21, Y+4	; 0x04
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	89 87       	std	Y+9, r24	; 0x09
    1a9c:	9a 87       	std	Y+10, r25	; 0x0a
    1a9e:	ab 87       	std	Y+11, r26	; 0x0b
    1aa0:	bc 87       	std	Y+12, r27	; 0x0c
	local_f32AnalogVoltage_mv = ADC_ADCH_REG * local_f32Step_mv;
#else
#error "Wrong Resolution !"
#endif

	return local_f32AnalogVoltage_mv;
    1aa2:	89 85       	ldd	r24, Y+9	; 0x09
    1aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1aa8:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1aaa:	bc 01       	movw	r22, r24
    1aac:	cd 01       	movw	r24, r26
    1aae:	2c 96       	adiw	r28, 0x0c	; 12
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <ADC_vidADCIrqEnable>:

void ADC_vidADCIrqEnable(void){
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_ADCSRA_REG, ADCSRA_ADIE_BIT);
    1ac8:	a6 e2       	ldi	r26, 0x26	; 38
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e6 e2       	ldi	r30, 0x26	; 38
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	88 60       	ori	r24, 0x08	; 8
    1ad4:	8c 93       	st	X, r24
}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <ADC_vidADCIrqDisable>:

void ADC_vidADCIrqDisable(void){
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADC_ADCSRA_REG, ADCSRA_ADIE_BIT);
    1ae4:	a6 e2       	ldi	r26, 0x26	; 38
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e6 e2       	ldi	r30, 0x26	; 38
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	87 7f       	andi	r24, 0xF7	; 247
    1af0:	8c 93       	st	X, r24
}
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <ADC_vidSetCallBckFunc>:

void ADC_vidSetCallBckFunc(void (*func_ptr)(void)){
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <ADC_vidSetCallBckFunc+0x6>
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
	if(func_ptr != NULL){
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	31 f0       	breq	.+12     	; 0x1b1a <ADC_vidSetCallBckFunc+0x22>
		ADC_CALL_BCK_PTR = func_ptr;
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	9a 81       	ldd	r25, Y+2	; 0x02
    1b12:	90 93 91 01 	sts	0x0191, r25
    1b16:	80 93 90 01 	sts	0x0190, r24
	}
}
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <LCD_vidInit>:
#include "../LCD_Handler_V1/LCD_cmds.h"
#include "../LCD_Handler_V1/LCD_err.h"
#include "avr/delay.h"

//function to initialize the LCD
void LCD_vidInit(void){
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	cf 54       	subi	r28, 0x4F	; 79
    1b32:	d0 40       	sbci	r29, 0x00	; 0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8SetFunction = SET_FUNCTION_CMD;
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e1 5b       	subi	r30, 0xB1	; 177
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	80 83       	st	Z, r24
	u8 local_u8DisplayControl = DISPLAY_CONTROL;
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e2 5b       	subi	r30, 0xB2	; 178
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	88 e0       	ldi	r24, 0x08	; 8
    1b50:	80 83       	st	Z, r24
	u8 local_u8EntryModeSet = ENTRY_MODE_SET;
    1b52:	fe 01       	movw	r30, r28
    1b54:	e3 5b       	subi	r30, 0xB3	; 179
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	84 e0       	ldi	r24, 0x04	; 4
    1b5a:	80 83       	st	Z, r24

	local_u8SetFunction 	|= ((LCD_MODE<<4) | (NO_OF_LINES<<3));
    1b5c:	de 01       	movw	r26, r28
    1b5e:	a1 5b       	subi	r26, 0xB1	; 177
    1b60:	bf 4f       	sbci	r27, 0xFF	; 255
    1b62:	fe 01       	movw	r30, r28
    1b64:	e1 5b       	subi	r30, 0xB1	; 177
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 61       	ori	r24, 0x18	; 24
    1b6c:	8c 93       	st	X, r24
	local_u8DisplayControl 	|= ((DISPLAY_STATE <<2) | (CURSOR_STATE <<1) | CURSOR_BLINKING);
    1b6e:	de 01       	movw	r26, r28
    1b70:	a2 5b       	subi	r26, 0xB2	; 178
    1b72:	bf 4f       	sbci	r27, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	e2 5b       	subi	r30, 0xB2	; 178
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	86 60       	ori	r24, 0x06	; 6
    1b7e:	8c 93       	st	X, r24
	local_u8EntryModeSet   	|= ((CURSOR_MOVE_DIRECTION<<1) | (DISPLAY_SHIFT_OPERATION));
    1b80:	de 01       	movw	r26, r28
    1b82:	a3 5b       	subi	r26, 0xB3	; 179
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e3 5b       	subi	r30, 0xB3	; 179
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	8c 93       	st	X, r24

	DIO_u8SetPortDir(LCD_DATA_PORT, FULL_OUTPUT);
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	6f ef       	ldi	r22, 0xFF	; 255
    1b96:	0e 94 a5 08 	call	0x114a	; 0x114a <DIO_u8SetPortDir>
	DIO_u8SetPinDir(RS_PORT, RS_PIN, OUTPUT);
    1b9a:	82 e0       	ldi	r24, 0x02	; 2
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	42 e0       	ldi	r20, 0x02	; 2
    1ba0:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinDir>
	DIO_u8SetPinDir(RW_PORT, RW_PIN, OUTPUT);
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	42 e0       	ldi	r20, 0x02	; 2
    1baa:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinDir>
	DIO_u8SetPinDir(E_PORT, E_PIN, OUTPUT);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	42 e0       	ldi	r20, 0x02	; 2
    1bb4:	0e 94 8d 09 	call	0x131a	; 0x131a <DIO_u8SetPinDir>
    1bb8:	fe 01       	movw	r30, r28
    1bba:	e7 5b       	subi	r30, 0xB7	; 183
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e2       	ldi	r26, 0x20	; 32
    1bc4:	b2 e4       	ldi	r27, 0x42	; 66
    1bc6:	80 83       	st	Z, r24
    1bc8:	91 83       	std	Z+1, r25	; 0x01
    1bca:	a2 83       	std	Z+2, r26	; 0x02
    1bcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bce:	8e 01       	movw	r16, r28
    1bd0:	0b 5b       	subi	r16, 0xBB	; 187
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	e7 5b       	subi	r30, 0xB7	; 183
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	60 81       	ld	r22, Z
    1bdc:	71 81       	ldd	r23, Z+1	; 0x01
    1bde:	82 81       	ldd	r24, Z+2	; 0x02
    1be0:	93 81       	ldd	r25, Z+3	; 0x03
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a ef       	ldi	r20, 0xFA	; 250
    1be8:	54 e4       	ldi	r21, 0x44	; 68
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	f8 01       	movw	r30, r16
    1bf4:	80 83       	st	Z, r24
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	a2 83       	std	Z+2, r26	; 0x02
    1bfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	eb 5b       	subi	r30, 0xBB	; 187
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e8       	ldi	r20, 0x80	; 128
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c16:	88 23       	and	r24, r24
    1c18:	44 f4       	brge	.+16     	; 0x1c2a <LCD_vidInit+0x106>
		__ticks = 1;
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ed 5b       	subi	r30, 0xBD	; 189
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	80 83       	st	Z, r24
    1c28:	64 c0       	rjmp	.+200    	; 0x1cf2 <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	eb 5b       	subi	r30, 0xBB	; 187
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	0c f0       	brlt	.+2      	; 0x1c4a <LCD_vidInit+0x126>
    1c48:	43 c0       	rjmp	.+134    	; 0x1cd0 <LCD_vidInit+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e7 5b       	subi	r30, 0xB7	; 183
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	8e 01       	movw	r16, r28
    1c6a:	0d 5b       	subi	r16, 0xBD	; 189
    1c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	1f c0       	rjmp	.+62     	; 0x1cc0 <LCD_vidInit+0x19c>
    1c82:	fe 01       	movw	r30, r28
    1c84:	ef 5b       	subi	r30, 0xBF	; 191
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	88 ec       	ldi	r24, 0xC8	; 200
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c90:	fe 01       	movw	r30, r28
    1c92:	ef 5b       	subi	r30, 0xBF	; 191
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_vidInit+0x176>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ef 5b       	subi	r30, 0xBF	; 191
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	de 01       	movw	r26, r28
    1caa:	ad 5b       	subi	r26, 0xBD	; 189
    1cac:	bf 4f       	sbci	r27, 0xFF	; 255
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 5b       	subi	r30, 0xBD	; 189
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	11 96       	adiw	r26, 0x01	; 1
    1cbc:	9c 93       	st	X, r25
    1cbe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ed 5b       	subi	r30, 0xBD	; 189
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	d1 f6       	brne	.-76     	; 0x1c82 <LCD_vidInit+0x15e>
    1cce:	24 c0       	rjmp	.+72     	; 0x1d18 <LCD_vidInit+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	0d 5b       	subi	r16, 0xBD	; 189
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	eb 5b       	subi	r30, 0xBB	; 187
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	f8 01       	movw	r30, r16
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	80 83       	st	Z, r24
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	ed 5b       	subi	r30, 0xBD	; 189
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ff 96       	adiw	r30, 0x3f	; 63
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	fe 01       	movw	r30, r28
    1d06:	ff 96       	adiw	r30, 0x3f	; 63
    1d08:	80 81       	ld	r24, Z
    1d0a:	91 81       	ldd	r25, Z+1	; 0x01
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <LCD_vidInit+0x1e8>
    1d10:	fe 01       	movw	r30, r28
    1d12:	ff 96       	adiw	r30, 0x3f	; 63
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24


#if  LCD_MODE == EIGHT_BITS
	_delay_ms(40);
	LCD_vidSendCmd(local_u8SetFunction);
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e1 5b       	subi	r30, 0xB1	; 177
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 81       	ld	r24, Z
    1d20:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a8 e4       	ldi	r26, 0x48	; 72
    1d2a:	b2 e4       	ldi	r27, 0x42	; 66
    1d2c:	8b af       	std	Y+59, r24	; 0x3b
    1d2e:	9c af       	std	Y+60, r25	; 0x3c
    1d30:	ad af       	std	Y+61, r26	; 0x3d
    1d32:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d34:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d36:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d38:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d3c:	2b ea       	ldi	r18, 0xAB	; 171
    1d3e:	3a ea       	ldi	r19, 0xAA	; 170
    1d40:	4a e2       	ldi	r20, 0x2A	; 42
    1d42:	50 e4       	ldi	r21, 0x40	; 64
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	8f ab       	std	Y+55, r24	; 0x37
    1d4e:	98 af       	std	Y+56, r25	; 0x38
    1d50:	a9 af       	std	Y+57, r26	; 0x39
    1d52:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d54:	6f a9       	ldd	r22, Y+55	; 0x37
    1d56:	78 ad       	ldd	r23, Y+56	; 0x38
    1d58:	89 ad       	ldd	r24, Y+57	; 0x39
    1d5a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	1c f4       	brge	.+6      	; 0x1d72 <LCD_vidInit+0x24e>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	8e ab       	std	Y+54, r24	; 0x36
    1d70:	91 c0       	rjmp	.+290    	; 0x1e94 <LCD_vidInit+0x370>
	else if (__tmp > 255)
    1d72:	6f a9       	ldd	r22, Y+55	; 0x37
    1d74:	78 ad       	ldd	r23, Y+56	; 0x38
    1d76:	89 ad       	ldd	r24, Y+57	; 0x39
    1d78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	53 e4       	ldi	r21, 0x43	; 67
    1d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	0c f0       	brlt	.+2      	; 0x1d8c <LCD_vidInit+0x268>
    1d8a:	7b c0       	rjmp	.+246    	; 0x1e82 <LCD_vidInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
    1d8c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d8e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d90:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d92:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	4a e7       	ldi	r20, 0x7A	; 122
    1d9a:	54 e4       	ldi	r21, 0x44	; 68
    1d9c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	8a ab       	std	Y+50, r24	; 0x32
    1da6:	9b ab       	std	Y+51, r25	; 0x33
    1da8:	ac ab       	std	Y+52, r26	; 0x34
    1daa:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	6a a9       	ldd	r22, Y+50	; 0x32
    1dae:	7b a9       	ldd	r23, Y+51	; 0x33
    1db0:	8c a9       	ldd	r24, Y+52	; 0x34
    1db2:	9d a9       	ldd	r25, Y+53	; 0x35
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	4a ef       	ldi	r20, 0xFA	; 250
    1dba:	54 e4       	ldi	r21, 0x44	; 68
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	8e a7       	std	Y+46, r24	; 0x2e
    1dc6:	9f a7       	std	Y+47, r25	; 0x2f
    1dc8:	a8 ab       	std	Y+48, r26	; 0x30
    1dca:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1dcc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dce:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dd0:	88 a9       	ldd	r24, Y+48	; 0x30
    1dd2:	99 a9       	ldd	r25, Y+49	; 0x31
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e8       	ldi	r20, 0x80	; 128
    1dda:	5f e3       	ldi	r21, 0x3F	; 63
    1ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de0:	88 23       	and	r24, r24
    1de2:	2c f4       	brge	.+10     	; 0x1dee <LCD_vidInit+0x2ca>
		__ticks = 1;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	9d a7       	std	Y+45, r25	; 0x2d
    1dea:	8c a7       	std	Y+44, r24	; 0x2c
    1dec:	3f c0       	rjmp	.+126    	; 0x1e6c <LCD_vidInit+0x348>
	else if (__tmp > 65535)
    1dee:	6e a5       	ldd	r22, Y+46	; 0x2e
    1df0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1df2:	88 a9       	ldd	r24, Y+48	; 0x30
    1df4:	99 a9       	ldd	r25, Y+49	; 0x31
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	3f ef       	ldi	r19, 0xFF	; 255
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	57 e4       	ldi	r21, 0x47	; 71
    1dfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	4c f5       	brge	.+82     	; 0x1e58 <LCD_vidInit+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e06:	6a a9       	ldd	r22, Y+50	; 0x32
    1e08:	7b a9       	ldd	r23, Y+51	; 0x33
    1e0a:	8c a9       	ldd	r24, Y+52	; 0x34
    1e0c:	9d a9       	ldd	r25, Y+53	; 0x35
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e2       	ldi	r20, 0x20	; 32
    1e14:	51 e4       	ldi	r21, 0x41	; 65
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9d a7       	std	Y+45, r25	; 0x2d
    1e2c:	8c a7       	std	Y+44, r24	; 0x2c
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <LCD_vidInit+0x32a>
    1e30:	88 ec       	ldi	r24, 0xC8	; 200
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	9b a7       	std	Y+43, r25	; 0x2b
    1e36:	8a a7       	std	Y+42, r24	; 0x2a
    1e38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e3a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_vidInit+0x318>
    1e40:	9b a7       	std	Y+43, r25	; 0x2b
    1e42:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e44:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e46:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	9d a7       	std	Y+45, r25	; 0x2d
    1e4c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e50:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e52:	00 97       	sbiw	r24, 0x00	; 0
    1e54:	69 f7       	brne	.-38     	; 0x1e30 <LCD_vidInit+0x30c>
    1e56:	24 c0       	rjmp	.+72     	; 0x1ea0 <LCD_vidInit+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e58:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e5a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e5c:	88 a9       	ldd	r24, Y+48	; 0x30
    1e5e:	99 a9       	ldd	r25, Y+49	; 0x31
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9d a7       	std	Y+45, r25	; 0x2d
    1e6a:	8c a7       	std	Y+44, r24	; 0x2c
    1e6c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e6e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e70:	99 a7       	std	Y+41, r25	; 0x29
    1e72:	88 a7       	std	Y+40, r24	; 0x28
    1e74:	88 a5       	ldd	r24, Y+40	; 0x28
    1e76:	99 a5       	ldd	r25, Y+41	; 0x29
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_vidInit+0x354>
    1e7c:	99 a7       	std	Y+41, r25	; 0x29
    1e7e:	88 a7       	std	Y+40, r24	; 0x28
    1e80:	0f c0       	rjmp	.+30     	; 0x1ea0 <LCD_vidInit+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e82:	6f a9       	ldd	r22, Y+55	; 0x37
    1e84:	78 ad       	ldd	r23, Y+56	; 0x38
    1e86:	89 ad       	ldd	r24, Y+57	; 0x39
    1e88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	8e ab       	std	Y+54, r24	; 0x36
    1e94:	8e a9       	ldd	r24, Y+54	; 0x36
    1e96:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e98:	8f a1       	ldd	r24, Y+39	; 0x27
    1e9a:	8a 95       	dec	r24
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_vidInit+0x376>
    1e9e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_vidSendCmd(local_u8DisplayControl);
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e2 5b       	subi	r30, 0xB2	; 178
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a8 e4       	ldi	r26, 0x48	; 72
    1eb2:	b2 e4       	ldi	r27, 0x42	; 66
    1eb4:	8b a3       	std	Y+35, r24	; 0x23
    1eb6:	9c a3       	std	Y+36, r25	; 0x24
    1eb8:	ad a3       	std	Y+37, r26	; 0x25
    1eba:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec4:	2b ea       	ldi	r18, 0xAB	; 171
    1ec6:	3a ea       	ldi	r19, 0xAA	; 170
    1ec8:	4a e2       	ldi	r20, 0x2A	; 42
    1eca:	50 e4       	ldi	r21, 0x40	; 64
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ed6:	98 a3       	std	Y+32, r25	; 0x20
    1ed8:	a9 a3       	std	Y+33, r26	; 0x21
    1eda:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1edc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ede:	78 a1       	ldd	r23, Y+32	; 0x20
    1ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	1c f4       	brge	.+6      	; 0x1efa <LCD_vidInit+0x3d6>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef8:	91 c0       	rjmp	.+290    	; 0x201c <LCD_vidInit+0x4f8>
	else if (__tmp > 255)
    1efa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1efc:	78 a1       	ldd	r23, Y+32	; 0x20
    1efe:	89 a1       	ldd	r24, Y+33	; 0x21
    1f00:	9a a1       	ldd	r25, Y+34	; 0x22
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	53 e4       	ldi	r21, 0x43	; 67
    1f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	0c f0       	brlt	.+2      	; 0x1f14 <LCD_vidInit+0x3f0>
    1f12:	7b c0       	rjmp	.+246    	; 0x200a <LCD_vidInit+0x4e6>
	{
		_delay_ms(__us / 1000.0);
    1f14:	6b a1       	ldd	r22, Y+35	; 0x23
    1f16:	7c a1       	ldd	r23, Y+36	; 0x24
    1f18:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	4a e7       	ldi	r20, 0x7A	; 122
    1f22:	54 e4       	ldi	r21, 0x44	; 68
    1f24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	8a 8f       	std	Y+26, r24	; 0x1a
    1f2e:	9b 8f       	std	Y+27, r25	; 0x1b
    1f30:	ac 8f       	std	Y+28, r26	; 0x1c
    1f32:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f36:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f38:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a ef       	ldi	r20, 0xFA	; 250
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8e 8b       	std	Y+22, r24	; 0x16
    1f4e:	9f 8b       	std	Y+23, r25	; 0x17
    1f50:	a8 8f       	std	Y+24, r26	; 0x18
    1f52:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f54:	6e 89       	ldd	r22, Y+22	; 0x16
    1f56:	7f 89       	ldd	r23, Y+23	; 0x17
    1f58:	88 8d       	ldd	r24, Y+24	; 0x18
    1f5a:	99 8d       	ldd	r25, Y+25	; 0x19
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <LCD_vidInit+0x452>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9d 8b       	std	Y+21, r25	; 0x15
    1f72:	8c 8b       	std	Y+20, r24	; 0x14
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <LCD_vidInit+0x4d0>
	else if (__tmp > 65535)
    1f76:	6e 89       	ldd	r22, Y+22	; 0x16
    1f78:	7f 89       	ldd	r23, Y+23	; 0x17
    1f7a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f7c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <LCD_vidInit+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f90:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9d 8b       	std	Y+21, r25	; 0x15
    1fb4:	8c 8b       	std	Y+20, r24	; 0x14
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <LCD_vidInit+0x4b2>
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9b 8b       	std	Y+19, r25	; 0x13
    1fbe:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc2:	9b 89       	ldd	r25, Y+19	; 0x13
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <LCD_vidInit+0x4a0>
    1fc8:	9b 8b       	std	Y+19, r25	; 0x13
    1fca:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	8c 89       	ldd	r24, Y+20	; 0x14
    1fce:	9d 89       	ldd	r25, Y+21	; 0x15
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9d 8b       	std	Y+21, r25	; 0x15
    1fd4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1fd8:	9d 89       	ldd	r25, Y+21	; 0x15
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <LCD_vidInit+0x494>
    1fde:	24 c0       	rjmp	.+72     	; 0x2028 <LCD_vidInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6e 89       	ldd	r22, Y+22	; 0x16
    1fe2:	7f 89       	ldd	r23, Y+23	; 0x17
    1fe4:	88 8d       	ldd	r24, Y+24	; 0x18
    1fe6:	99 8d       	ldd	r25, Y+25	; 0x19
    1fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9d 8b       	std	Y+21, r25	; 0x15
    1ff2:	8c 8b       	std	Y+20, r24	; 0x14
    1ff4:	8c 89       	ldd	r24, Y+20	; 0x14
    1ff6:	9d 89       	ldd	r25, Y+21	; 0x15
    1ff8:	99 8b       	std	Y+17, r25	; 0x11
    1ffa:	88 8b       	std	Y+16, r24	; 0x10
    1ffc:	88 89       	ldd	r24, Y+16	; 0x10
    1ffe:	99 89       	ldd	r25, Y+17	; 0x11
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_vidInit+0x4dc>
    2004:	99 8b       	std	Y+17, r25	; 0x11
    2006:	88 8b       	std	Y+16, r24	; 0x10
    2008:	0f c0       	rjmp	.+30     	; 0x2028 <LCD_vidInit+0x504>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    200c:	78 a1       	ldd	r23, Y+32	; 0x20
    200e:	89 a1       	ldd	r24, Y+33	; 0x21
    2010:	9a a1       	ldd	r25, Y+34	; 0x22
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	8e 8f       	std	Y+30, r24	; 0x1e
    201c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    201e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2020:	8f 85       	ldd	r24, Y+15	; 0x0f
    2022:	8a 95       	dec	r24
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_vidInit+0x4fe>
    2026:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_vidSendCmd(DISPLAY_CLEAR);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a0 e0       	ldi	r26, 0x00	; 0
    2034:	b0 e4       	ldi	r27, 0x40	; 64
    2036:	8b 87       	std	Y+11, r24	; 0x0b
    2038:	9c 87       	std	Y+12, r25	; 0x0c
    203a:	ad 87       	std	Y+13, r26	; 0x0d
    203c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	4a ef       	ldi	r20, 0xFA	; 250
    204c:	54 e4       	ldi	r21, 0x44	; 68
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	8f 83       	std	Y+7, r24	; 0x07
    2058:	98 87       	std	Y+8, r25	; 0x08
    205a:	a9 87       	std	Y+9, r26	; 0x09
    205c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	40 e8       	ldi	r20, 0x80	; 128
    206c:	5f e3       	ldi	r21, 0x3F	; 63
    206e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2072:	88 23       	and	r24, r24
    2074:	2c f4       	brge	.+10     	; 0x2080 <LCD_vidInit+0x55c>
		__ticks = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	3f c0       	rjmp	.+126    	; 0x20fe <LCD_vidInit+0x5da>
	else if (__tmp > 65535)
    2080:	6f 81       	ldd	r22, Y+7	; 0x07
    2082:	78 85       	ldd	r23, Y+8	; 0x08
    2084:	89 85       	ldd	r24, Y+9	; 0x09
    2086:	9a 85       	ldd	r25, Y+10	; 0x0a
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	3f ef       	ldi	r19, 0xFF	; 255
    208c:	4f e7       	ldi	r20, 0x7F	; 127
    208e:	57 e4       	ldi	r21, 0x47	; 71
    2090:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2094:	18 16       	cp	r1, r24
    2096:	4c f5       	brge	.+82     	; 0x20ea <LCD_vidInit+0x5c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_vidInit+0x5bc>
    20c2:	88 ec       	ldi	r24, 0xC8	; 200
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 83       	std	Y+4, r25	; 0x04
    20c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_vidInit+0x5aa>
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8d 81       	ldd	r24, Y+5	; 0x05
    20d8:	9e 81       	ldd	r25, Y+6	; 0x06
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8d 81       	ldd	r24, Y+5	; 0x05
    20e2:	9e 81       	ldd	r25, Y+6	; 0x06
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_vidInit+0x59e>
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <LCD_vidInit+0x5ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	6f 81       	ldd	r22, Y+7	; 0x07
    20ec:	78 85       	ldd	r23, Y+8	; 0x08
    20ee:	89 85       	ldd	r24, Y+9	; 0x09
    20f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_vidInit+0x5e6>
    210e:	9a 83       	std	Y+2, r25	; 0x02
    2110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_vidSendCmd(local_u8EntryModeSet);
    2112:	fe 01       	movw	r30, r28
    2114:	e3 5b       	subi	r30, 0xB3	; 179
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 81       	ld	r24, Z
    211a:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>

#elif LCD_MODE == FOUR_BITS
#else
#error "Wrong Configuration !"
#endif
}
    211e:	c1 5b       	subi	r28, 0xB1	; 177
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	1f 91       	pop	r17
    2132:	0f 91       	pop	r16
    2134:	08 95       	ret

00002136 <LCD_vidSendCmd>:

//function to send command
void LCD_vidSendCmd(u8 Copy_u8Cmd){
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	69 97       	sbiw	r28, 0x19	; 25
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8SetPinVal(RS_PORT, RS_PIN, LOW);
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	41 e0       	ldi	r20, 0x01	; 1
    2152:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(RW_PORT, RW_PIN, LOW);
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8SetPinVal(E_PORT, E_PIN, HIGH);
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	62 e0       	ldi	r22, 0x02	; 2
    2164:	42 e0       	ldi	r20, 0x02	; 2
    2166:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT, Copy_u8Cmd);
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	69 8d       	ldd	r22, Y+25	; 0x19
    216e:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPortVal>
	DIO_u8SetPinVal(E_PORT, E_PIN, LOW);
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 e8       	ldi	r26, 0x80	; 128
    2182:	bf e3       	ldi	r27, 0x3F	; 63
    2184:	8d 8b       	std	Y+21, r24	; 0x15
    2186:	9e 8b       	std	Y+22, r25	; 0x16
    2188:	af 8b       	std	Y+23, r26	; 0x17
    218a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	2b ea       	ldi	r18, 0xAB	; 171
    2196:	3a ea       	ldi	r19, 0xAA	; 170
    2198:	4a e2       	ldi	r20, 0x2A	; 42
    219a:	50 e4       	ldi	r21, 0x40	; 64
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	89 8b       	std	Y+17, r24	; 0x11
    21a6:	9a 8b       	std	Y+18, r25	; 0x12
    21a8:	ab 8b       	std	Y+19, r26	; 0x13
    21aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21ac:	69 89       	ldd	r22, Y+17	; 0x11
    21ae:	7a 89       	ldd	r23, Y+18	; 0x12
    21b0:	8b 89       	ldd	r24, Y+19	; 0x13
    21b2:	9c 89       	ldd	r25, Y+20	; 0x14
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	1c f4       	brge	.+6      	; 0x21ca <LCD_vidSendCmd+0x94>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	88 8b       	std	Y+16, r24	; 0x10
    21c8:	91 c0       	rjmp	.+290    	; 0x22ec <LCD_vidSendCmd+0x1b6>
	else if (__tmp > 255)
    21ca:	69 89       	ldd	r22, Y+17	; 0x11
    21cc:	7a 89       	ldd	r23, Y+18	; 0x12
    21ce:	8b 89       	ldd	r24, Y+19	; 0x13
    21d0:	9c 89       	ldd	r25, Y+20	; 0x14
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	53 e4       	ldi	r21, 0x43	; 67
    21da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <LCD_vidSendCmd+0xae>
    21e2:	7b c0       	rjmp	.+246    	; 0x22da <LCD_vidSendCmd+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    21e4:	6d 89       	ldd	r22, Y+21	; 0x15
    21e6:	7e 89       	ldd	r23, Y+22	; 0x16
    21e8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ea:	98 8d       	ldd	r25, Y+24	; 0x18
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e7       	ldi	r20, 0x7A	; 122
    21f2:	54 e4       	ldi	r21, 0x44	; 68
    21f4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	8c 87       	std	Y+12, r24	; 0x0c
    21fe:	9d 87       	std	Y+13, r25	; 0x0d
    2200:	ae 87       	std	Y+14, r26	; 0x0e
    2202:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6c 85       	ldd	r22, Y+12	; 0x0c
    2206:	7d 85       	ldd	r23, Y+13	; 0x0d
    2208:	8e 85       	ldd	r24, Y+14	; 0x0e
    220a:	9f 85       	ldd	r25, Y+15	; 0x0f
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a ef       	ldi	r20, 0xFA	; 250
    2212:	54 e4       	ldi	r21, 0x44	; 68
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	88 87       	std	Y+8, r24	; 0x08
    221e:	99 87       	std	Y+9, r25	; 0x09
    2220:	aa 87       	std	Y+10, r26	; 0x0a
    2222:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2224:	68 85       	ldd	r22, Y+8	; 0x08
    2226:	79 85       	ldd	r23, Y+9	; 0x09
    2228:	8a 85       	ldd	r24, Y+10	; 0x0a
    222a:	9b 85       	ldd	r25, Y+11	; 0x0b
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <LCD_vidSendCmd+0x110>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <LCD_vidSendCmd+0x18e>
	else if (__tmp > 65535)
    2246:	68 85       	ldd	r22, Y+8	; 0x08
    2248:	79 85       	ldd	r23, Y+9	; 0x09
    224a:	8a 85       	ldd	r24, Y+10	; 0x0a
    224c:	9b 85       	ldd	r25, Y+11	; 0x0b
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <LCD_vidSendCmd+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2260:	7d 85       	ldd	r23, Y+13	; 0x0d
    2262:	8e 85       	ldd	r24, Y+14	; 0x0e
    2264:	9f 85       	ldd	r25, Y+15	; 0x0f
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9f 83       	std	Y+7, r25	; 0x07
    2284:	8e 83       	std	Y+6, r24	; 0x06
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <LCD_vidSendCmd+0x170>
    2288:	88 ec       	ldi	r24, 0xC8	; 200
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	9d 83       	std	Y+5, r25	; 0x05
    228e:	8c 83       	std	Y+4, r24	; 0x04
    2290:	8c 81       	ldd	r24, Y+4	; 0x04
    2292:	9d 81       	ldd	r25, Y+5	; 0x05
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_vidSendCmd+0x15e>
    2298:	9d 83       	std	Y+5, r25	; 0x05
    229a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8e 81       	ldd	r24, Y+6	; 0x06
    229e:	9f 81       	ldd	r25, Y+7	; 0x07
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9f 83       	std	Y+7, r25	; 0x07
    22a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8e 81       	ldd	r24, Y+6	; 0x06
    22a8:	9f 81       	ldd	r25, Y+7	; 0x07
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <LCD_vidSendCmd+0x152>
    22ae:	24 c0       	rjmp	.+72     	; 0x22f8 <LCD_vidSendCmd+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	68 85       	ldd	r22, Y+8	; 0x08
    22b2:	79 85       	ldd	r23, Y+9	; 0x09
    22b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9f 83       	std	Y+7, r25	; 0x07
    22c2:	8e 83       	std	Y+6, r24	; 0x06
    22c4:	8e 81       	ldd	r24, Y+6	; 0x06
    22c6:	9f 81       	ldd	r25, Y+7	; 0x07
    22c8:	9b 83       	std	Y+3, r25	; 0x03
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_vidSendCmd+0x19a>
    22d4:	9b 83       	std	Y+3, r25	; 0x03
    22d6:	8a 83       	std	Y+2, r24	; 0x02
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <LCD_vidSendCmd+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22da:	69 89       	ldd	r22, Y+17	; 0x11
    22dc:	7a 89       	ldd	r23, Y+18	; 0x12
    22de:	8b 89       	ldd	r24, Y+19	; 0x13
    22e0:	9c 89       	ldd	r25, Y+20	; 0x14
    22e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	88 8b       	std	Y+16, r24	; 0x10
    22ec:	88 89       	ldd	r24, Y+16	; 0x10
    22ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	8a 95       	dec	r24
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_vidSendCmd+0x1bc>
    22f6:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    22f8:	69 96       	adiw	r28, 0x19	; 25
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	f8 94       	cli
    22fe:	de bf       	out	0x3e, r29	; 62
    2300:	0f be       	out	0x3f, r0	; 63
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <LCD_vidWriteChar>:
//function to send data
void LCD_vidWriteChar(u8 Copy_u8Char){
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	69 97       	sbiw	r28, 0x19	; 25
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	89 8f       	std	Y+25, r24	; 0x19
	DIO_u8SetPinVal(RS_PORT, RS_PIN, HIGH);
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	42 e0       	ldi	r20, 0x02	; 2
    2326:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>
	DIO_u8SetPinVal(RW_PORT, RW_PIN, LOW);
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	61 e0       	ldi	r22, 0x01	; 1
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>

#if  LCD_MODE == EIGHT_BITS
	DIO_u8SetPinVal(E_PORT, E_PIN, HIGH);
    2334:	82 e0       	ldi	r24, 0x02	; 2
    2336:	62 e0       	ldi	r22, 0x02	; 2
    2338:	42 e0       	ldi	r20, 0x02	; 2
    233a:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>
	DIO_u8SetPortVal(LCD_DATA_PORT, Copy_u8Char);
    233e:	83 e0       	ldi	r24, 0x03	; 3
    2340:	69 8d       	ldd	r22, Y+25	; 0x19
    2342:	0e 94 ef 08 	call	0x11de	; 0x11de <DIO_u8SetPortVal>
	DIO_u8SetPinVal(E_PORT, E_PIN, LOW);
    2346:	82 e0       	ldi	r24, 0x02	; 2
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 97 0a 	call	0x152e	; 0x152e <DIO_u8SetPinVal>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e8       	ldi	r26, 0x80	; 128
    2356:	bf e3       	ldi	r27, 0x3F	; 63
    2358:	8d 8b       	std	Y+21, r24	; 0x15
    235a:	9e 8b       	std	Y+22, r25	; 0x16
    235c:	af 8b       	std	Y+23, r26	; 0x17
    235e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2360:	6d 89       	ldd	r22, Y+21	; 0x15
    2362:	7e 89       	ldd	r23, Y+22	; 0x16
    2364:	8f 89       	ldd	r24, Y+23	; 0x17
    2366:	98 8d       	ldd	r25, Y+24	; 0x18
    2368:	2b ea       	ldi	r18, 0xAB	; 171
    236a:	3a ea       	ldi	r19, 0xAA	; 170
    236c:	4a e2       	ldi	r20, 0x2A	; 42
    236e:	50 e4       	ldi	r21, 0x40	; 64
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	89 8b       	std	Y+17, r24	; 0x11
    237a:	9a 8b       	std	Y+18, r25	; 0x12
    237c:	ab 8b       	std	Y+19, r26	; 0x13
    237e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2380:	69 89       	ldd	r22, Y+17	; 0x11
    2382:	7a 89       	ldd	r23, Y+18	; 0x12
    2384:	8b 89       	ldd	r24, Y+19	; 0x13
    2386:	9c 89       	ldd	r25, Y+20	; 0x14
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	1c f4       	brge	.+6      	; 0x239e <LCD_vidWriteChar+0x94>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	88 8b       	std	Y+16, r24	; 0x10
    239c:	91 c0       	rjmp	.+290    	; 0x24c0 <LCD_vidWriteChar+0x1b6>
	else if (__tmp > 255)
    239e:	69 89       	ldd	r22, Y+17	; 0x11
    23a0:	7a 89       	ldd	r23, Y+18	; 0x12
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	53 e4       	ldi	r21, 0x43	; 67
    23ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	0c f0       	brlt	.+2      	; 0x23b8 <LCD_vidWriteChar+0xae>
    23b6:	7b c0       	rjmp	.+246    	; 0x24ae <LCD_vidWriteChar+0x1a4>
	{
		_delay_ms(__us / 1000.0);
    23b8:	6d 89       	ldd	r22, Y+21	; 0x15
    23ba:	7e 89       	ldd	r23, Y+22	; 0x16
    23bc:	8f 89       	ldd	r24, Y+23	; 0x17
    23be:	98 8d       	ldd	r25, Y+24	; 0x18
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a e7       	ldi	r20, 0x7A	; 122
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8c 87       	std	Y+12, r24	; 0x0c
    23d2:	9d 87       	std	Y+13, r25	; 0x0d
    23d4:	ae 87       	std	Y+14, r26	; 0x0e
    23d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    23da:	7d 85       	ldd	r23, Y+13	; 0x0d
    23dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    23de:	9f 85       	ldd	r25, Y+15	; 0x0f
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a ef       	ldi	r20, 0xFA	; 250
    23e6:	54 e4       	ldi	r21, 0x44	; 68
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	88 87       	std	Y+8, r24	; 0x08
    23f2:	99 87       	std	Y+9, r25	; 0x09
    23f4:	aa 87       	std	Y+10, r26	; 0x0a
    23f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23f8:	68 85       	ldd	r22, Y+8	; 0x08
    23fa:	79 85       	ldd	r23, Y+9	; 0x09
    23fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	2c f4       	brge	.+10     	; 0x241a <LCD_vidWriteChar+0x110>
		__ticks = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9f 83       	std	Y+7, r25	; 0x07
    2416:	8e 83       	std	Y+6, r24	; 0x06
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <LCD_vidWriteChar+0x18e>
	else if (__tmp > 65535)
    241a:	68 85       	ldd	r22, Y+8	; 0x08
    241c:	79 85       	ldd	r23, Y+9	; 0x09
    241e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2420:	9b 85       	ldd	r25, Y+11	; 0x0b
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	4c f5       	brge	.+82     	; 0x2484 <LCD_vidWriteChar+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	6c 85       	ldd	r22, Y+12	; 0x0c
    2434:	7d 85       	ldd	r23, Y+13	; 0x0d
    2436:	8e 85       	ldd	r24, Y+14	; 0x0e
    2438:	9f 85       	ldd	r25, Y+15	; 0x0f
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9f 83       	std	Y+7, r25	; 0x07
    2458:	8e 83       	std	Y+6, r24	; 0x06
    245a:	0f c0       	rjmp	.+30     	; 0x247a <LCD_vidWriteChar+0x170>
    245c:	88 ec       	ldi	r24, 0xC8	; 200
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9d 83       	std	Y+5, r25	; 0x05
    2462:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_vidWriteChar+0x15e>
    246c:	9d 83       	std	Y+5, r25	; 0x05
    246e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	8e 81       	ldd	r24, Y+6	; 0x06
    2472:	9f 81       	ldd	r25, Y+7	; 0x07
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9f 83       	std	Y+7, r25	; 0x07
    2478:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
    247c:	9f 81       	ldd	r25, Y+7	; 0x07
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	69 f7       	brne	.-38     	; 0x245c <LCD_vidWriteChar+0x152>
    2482:	24 c0       	rjmp	.+72     	; 0x24cc <LCD_vidWriteChar+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	68 85       	ldd	r22, Y+8	; 0x08
    2486:	79 85       	ldd	r23, Y+9	; 0x09
    2488:	8a 85       	ldd	r24, Y+10	; 0x0a
    248a:	9b 85       	ldd	r25, Y+11	; 0x0b
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9f 83       	std	Y+7, r25	; 0x07
    2496:	8e 83       	std	Y+6, r24	; 0x06
    2498:	8e 81       	ldd	r24, Y+6	; 0x06
    249a:	9f 81       	ldd	r25, Y+7	; 0x07
    249c:	9b 83       	std	Y+3, r25	; 0x03
    249e:	8a 83       	std	Y+2, r24	; 0x02
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_vidWriteChar+0x19a>
    24a8:	9b 83       	std	Y+3, r25	; 0x03
    24aa:	8a 83       	std	Y+2, r24	; 0x02
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <LCD_vidWriteChar+0x1c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ae:	69 89       	ldd	r22, Y+17	; 0x11
    24b0:	7a 89       	ldd	r23, Y+18	; 0x12
    24b2:	8b 89       	ldd	r24, Y+19	; 0x13
    24b4:	9c 89       	ldd	r25, Y+20	; 0x14
    24b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	88 8b       	std	Y+16, r24	; 0x10
    24c0:	88 89       	ldd	r24, Y+16	; 0x10
    24c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	8a 95       	dec	r24
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_vidWriteChar+0x1bc>
    24ca:	89 83       	std	Y+1, r24	; 0x01
#elif LCD_MODE == FOUR_BITS

#else
#error "Wrong Configuration !"
#endif
}
    24cc:	69 96       	adiw	r28, 0x19	; 25
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <LCD_vidClear>:

//function to clear the display
void LCD_vidClear(void){
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	68 97       	sbiw	r28, 0x18	; 24
    24e8:	0f b6       	in	r0, 0x3f	; 63
    24ea:	f8 94       	cli
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	cd bf       	out	0x3d, r28	; 61
	LCD_vidSendCmd(DISPLAY_CLEAR);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a8 ec       	ldi	r26, 0xC8	; 200
    24fe:	b2 e4       	ldi	r27, 0x42	; 66
    2500:	8d 8b       	std	Y+21, r24	; 0x15
    2502:	9e 8b       	std	Y+22, r25	; 0x16
    2504:	af 8b       	std	Y+23, r26	; 0x17
    2506:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2508:	6d 89       	ldd	r22, Y+21	; 0x15
    250a:	7e 89       	ldd	r23, Y+22	; 0x16
    250c:	8f 89       	ldd	r24, Y+23	; 0x17
    250e:	98 8d       	ldd	r25, Y+24	; 0x18
    2510:	2b ea       	ldi	r18, 0xAB	; 171
    2512:	3a ea       	ldi	r19, 0xAA	; 170
    2514:	4a e2       	ldi	r20, 0x2A	; 42
    2516:	50 e4       	ldi	r21, 0x40	; 64
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	89 8b       	std	Y+17, r24	; 0x11
    2522:	9a 8b       	std	Y+18, r25	; 0x12
    2524:	ab 8b       	std	Y+19, r26	; 0x13
    2526:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2528:	69 89       	ldd	r22, Y+17	; 0x11
    252a:	7a 89       	ldd	r23, Y+18	; 0x12
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e8       	ldi	r20, 0x80	; 128
    2536:	5f e3       	ldi	r21, 0x3F	; 63
    2538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    253c:	88 23       	and	r24, r24
    253e:	1c f4       	brge	.+6      	; 0x2546 <LCD_vidClear+0x68>
		__ticks = 1;
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	88 8b       	std	Y+16, r24	; 0x10
    2544:	91 c0       	rjmp	.+290    	; 0x2668 <LCD_vidClear+0x18a>
	else if (__tmp > 255)
    2546:	69 89       	ldd	r22, Y+17	; 0x11
    2548:	7a 89       	ldd	r23, Y+18	; 0x12
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	53 e4       	ldi	r21, 0x43	; 67
    2556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	0c f0       	brlt	.+2      	; 0x2560 <LCD_vidClear+0x82>
    255e:	7b c0       	rjmp	.+246    	; 0x2656 <LCD_vidClear+0x178>
	{
		_delay_ms(__us / 1000.0);
    2560:	6d 89       	ldd	r22, Y+21	; 0x15
    2562:	7e 89       	ldd	r23, Y+22	; 0x16
    2564:	8f 89       	ldd	r24, Y+23	; 0x17
    2566:	98 8d       	ldd	r25, Y+24	; 0x18
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a e7       	ldi	r20, 0x7A	; 122
    256e:	54 e4       	ldi	r21, 0x44	; 68
    2570:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8c 87       	std	Y+12, r24	; 0x0c
    257a:	9d 87       	std	Y+13, r25	; 0x0d
    257c:	ae 87       	std	Y+14, r26	; 0x0e
    257e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2580:	6c 85       	ldd	r22, Y+12	; 0x0c
    2582:	7d 85       	ldd	r23, Y+13	; 0x0d
    2584:	8e 85       	ldd	r24, Y+14	; 0x0e
    2586:	9f 85       	ldd	r25, Y+15	; 0x0f
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	4a ef       	ldi	r20, 0xFA	; 250
    258e:	54 e4       	ldi	r21, 0x44	; 68
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	88 87       	std	Y+8, r24	; 0x08
    259a:	99 87       	std	Y+9, r25	; 0x09
    259c:	aa 87       	std	Y+10, r26	; 0x0a
    259e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25a0:	68 85       	ldd	r22, Y+8	; 0x08
    25a2:	79 85       	ldd	r23, Y+9	; 0x09
    25a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e8       	ldi	r20, 0x80	; 128
    25ae:	5f e3       	ldi	r21, 0x3F	; 63
    25b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b4:	88 23       	and	r24, r24
    25b6:	2c f4       	brge	.+10     	; 0x25c2 <LCD_vidClear+0xe4>
		__ticks = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	9f 83       	std	Y+7, r25	; 0x07
    25be:	8e 83       	std	Y+6, r24	; 0x06
    25c0:	3f c0       	rjmp	.+126    	; 0x2640 <LCD_vidClear+0x162>
	else if (__tmp > 65535)
    25c2:	68 85       	ldd	r22, Y+8	; 0x08
    25c4:	79 85       	ldd	r23, Y+9	; 0x09
    25c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	3f ef       	ldi	r19, 0xFF	; 255
    25ce:	4f e7       	ldi	r20, 0x7F	; 127
    25d0:	57 e4       	ldi	r21, 0x47	; 71
    25d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d6:	18 16       	cp	r1, r24
    25d8:	4c f5       	brge	.+82     	; 0x262c <LCD_vidClear+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25da:	6c 85       	ldd	r22, Y+12	; 0x0c
    25dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    25de:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9f 83       	std	Y+7, r25	; 0x07
    2600:	8e 83       	std	Y+6, r24	; 0x06
    2602:	0f c0       	rjmp	.+30     	; 0x2622 <LCD_vidClear+0x144>
    2604:	88 ec       	ldi	r24, 0xC8	; 200
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	9d 83       	std	Y+5, r25	; 0x05
    260a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	f1 f7       	brne	.-4      	; 0x2610 <LCD_vidClear+0x132>
    2614:	9d 83       	std	Y+5, r25	; 0x05
    2616:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2618:	8e 81       	ldd	r24, Y+6	; 0x06
    261a:	9f 81       	ldd	r25, Y+7	; 0x07
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	9f 83       	std	Y+7, r25	; 0x07
    2620:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2622:	8e 81       	ldd	r24, Y+6	; 0x06
    2624:	9f 81       	ldd	r25, Y+7	; 0x07
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	69 f7       	brne	.-38     	; 0x2604 <LCD_vidClear+0x126>
    262a:	24 c0       	rjmp	.+72     	; 0x2674 <LCD_vidClear+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262c:	68 85       	ldd	r22, Y+8	; 0x08
    262e:	79 85       	ldd	r23, Y+9	; 0x09
    2630:	8a 85       	ldd	r24, Y+10	; 0x0a
    2632:	9b 85       	ldd	r25, Y+11	; 0x0b
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	9f 83       	std	Y+7, r25	; 0x07
    263e:	8e 83       	std	Y+6, r24	; 0x06
    2640:	8e 81       	ldd	r24, Y+6	; 0x06
    2642:	9f 81       	ldd	r25, Y+7	; 0x07
    2644:	9b 83       	std	Y+3, r25	; 0x03
    2646:	8a 83       	std	Y+2, r24	; 0x02
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	9b 81       	ldd	r25, Y+3	; 0x03
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <LCD_vidClear+0x16e>
    2650:	9b 83       	std	Y+3, r25	; 0x03
    2652:	8a 83       	std	Y+2, r24	; 0x02
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <LCD_vidClear+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2656:	69 89       	ldd	r22, Y+17	; 0x11
    2658:	7a 89       	ldd	r23, Y+18	; 0x12
    265a:	8b 89       	ldd	r24, Y+19	; 0x13
    265c:	9c 89       	ldd	r25, Y+20	; 0x14
    265e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	88 8b       	std	Y+16, r24	; 0x10
    2668:	88 89       	ldd	r24, Y+16	; 0x10
    266a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	8a 95       	dec	r24
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_vidClear+0x190>
    2672:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);								//delay to force the next instructions to wait until the clear ins is executed
}
    2674:	68 96       	adiw	r28, 0x18	; 24
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <LCD_u8Goto>:

//function to go to specific segment
u8 LCD_u8Goto(u8 Copy_u8Row, u8 Copy_u8Col){
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <LCD_u8Goto+0x6>
    268c:	00 d0       	rcall	.+0      	; 0x268e <LCD_u8Goto+0x8>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <LCD_u8Goto+0xa>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	8b 83       	std	Y+3, r24	; 0x03
    2696:	6c 83       	std	Y+4, r22	; 0x04
	u8 local_u8ErrorStatus = RT_OK;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8Set_DDRAM_Address = SET_DDRAM_ADDRESS;
    269c:	80 e8       	ldi	r24, 0x80	; 128
    269e:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8Row){
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	3e 83       	std	Y+6, r19	; 0x06
    26a8:	2d 83       	std	Y+5, r18	; 0x05
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	81 30       	cpi	r24, 0x01	; 1
    26b0:	91 05       	cpc	r25, r1
    26b2:	31 f0       	breq	.+12     	; 0x26c0 <LCD_u8Goto+0x3a>
    26b4:	2d 81       	ldd	r18, Y+5	; 0x05
    26b6:	3e 81       	ldd	r19, Y+6	; 0x06
    26b8:	22 30       	cpi	r18, 0x02	; 2
    26ba:	31 05       	cpc	r19, r1
    26bc:	81 f0       	breq	.+32     	; 0x26de <LCD_u8Goto+0x58>
    26be:	1e c0       	rjmp	.+60     	; 0x26fc <LCD_u8Goto+0x76>
	case 1:
		if(Copy_u8Col <= 64){
    26c0:	8c 81       	ldd	r24, Y+4	; 0x04
    26c2:	81 34       	cpi	r24, 0x41	; 65
    26c4:	48 f4       	brcc	.+18     	; 0x26d8 <LCD_u8Goto+0x52>
			local_u8Set_DDRAM_Address += (Copy_u8Col - 1);
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	89 0f       	add	r24, r25
    26cc:	81 50       	subi	r24, 0x01	; 1
    26ce:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
    26d6:	14 c0       	rjmp	.+40     	; 0x2700 <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	8a 83       	std	Y+2, r24	; 0x02
    26dc:	11 c0       	rjmp	.+34     	; 0x2700 <LCD_u8Goto+0x7a>
		}
		break;
	case 2:
		if(Copy_u8Col <= 16){
    26de:	8c 81       	ldd	r24, Y+4	; 0x04
    26e0:	81 31       	cpi	r24, 0x11	; 17
    26e2:	48 f4       	brcc	.+18     	; 0x26f6 <LCD_u8Goto+0x70>
			local_u8Set_DDRAM_Address += (64 + (Copy_u8Col-1));
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	89 0f       	add	r24, r25
    26ea:	81 5c       	subi	r24, 0xC1	; 193
    26ec:	89 83       	std	Y+1, r24	; 0x01
			LCD_vidSendCmd(local_u8Set_DDRAM_Address);
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <LCD_u8Goto+0x7a>
		}else{
			local_u8ErrorStatus = RT_WRONG_COLUMN_NUMBER;
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	8a 83       	std	Y+2, r24	; 0x02
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <LCD_u8Goto+0x7a>
		}
		break;
	default:
		local_u8ErrorStatus = RT_WRONG_ROW_NUMBER;
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	8a 83       	std	Y+2, r24	; 0x02
	}

	return local_u8ErrorStatus;
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2702:	26 96       	adiw	r28, 0x06	; 6
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <LCD_vidSendString>:

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <LCD_vidSendString+0x6>
    271a:	0f 92       	push	r0
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
	u8 i =0;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	0e c0       	rjmp	.+28     	; 0x2744 <LCD_vidSendString+0x30>
	while(*(Copy_u8CharPtr + i) != '\0'){
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
    2728:	89 81       	ldd	r24, Y+1	; 0x01
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	8a 81       	ldd	r24, Y+2	; 0x02
    2730:	9b 81       	ldd	r25, Y+3	; 0x03
    2732:	fc 01       	movw	r30, r24
    2734:	e2 0f       	add	r30, r18
    2736:	f3 1f       	adc	r31, r19
    2738:	80 81       	ld	r24, Z
    273a:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_vidWriteChar>
		i++;
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	8f 5f       	subi	r24, 0xFF	; 255
    2742:	89 83       	std	Y+1, r24	; 0x01
}

//function to send string
void LCD_vidSendString(u8 * Copy_u8CharPtr){
	u8 i =0;
	while(*(Copy_u8CharPtr + i) != '\0'){
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	fc 01       	movw	r30, r24
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	80 81       	ld	r24, Z
    2756:	88 23       	and	r24, r24
    2758:	39 f7       	brne	.-50     	; 0x2728 <LCD_vidSendString+0x14>
		LCD_vidWriteChar(* (Copy_u8CharPtr + i));
		i++;
	}
}
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <LCD_vidSendInt>:

//function to display integers
void LCD_vidSendInt(u32 Copy_u32IntNumber){
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	2a 97       	sbiw	r28, 0x0a	; 10
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	6f 83       	std	Y+7, r22	; 0x07
    277c:	78 87       	std	Y+8, r23	; 0x08
    277e:	89 87       	std	Y+9, r24	; 0x09
    2780:	9a 87       	std	Y+10, r25	; 0x0a
	if(Copy_u32IntNumber != 0){
    2782:	8f 81       	ldd	r24, Y+7	; 0x07
    2784:	98 85       	ldd	r25, Y+8	; 0x08
    2786:	a9 85       	ldd	r26, Y+9	; 0x09
    2788:	ba 85       	ldd	r27, Y+10	; 0x0a
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	a1 05       	cpc	r26, r1
    278e:	b1 05       	cpc	r27, r1
    2790:	09 f4       	brne	.+2      	; 0x2794 <LCD_vidSendInt+0x2e>
    2792:	8b c0       	rjmp	.+278    	; 0x28aa <LCD_vidSendInt+0x144>
		u32 local_u32NewNumber = 0;
    2794:	1b 82       	std	Y+3, r1	; 0x03
    2796:	1c 82       	std	Y+4, r1	; 0x04
    2798:	1d 82       	std	Y+5, r1	; 0x05
    279a:	1e 82       	std	Y+6, r1	; 0x06
		u8 local_u8NewDigit = 0;
    279c:	1a 82       	std	Y+2, r1	; 0x02
		u8 counter = 0;
    279e:	19 82       	std	Y+1, r1	; 0x01
    27a0:	3f c0       	rjmp	.+126    	; 0x2820 <LCD_vidSendInt+0xba>
		while(Copy_u32IntNumber !=0){
			local_u8NewDigit = Copy_u32IntNumber % 10;
    27a2:	8f 81       	ldd	r24, Y+7	; 0x07
    27a4:	98 85       	ldd	r25, Y+8	; 0x08
    27a6:	a9 85       	ldd	r26, Y+9	; 0x09
    27a8:	ba 85       	ldd	r27, Y+10	; 0x0a
    27aa:	2a e0       	ldi	r18, 0x0A	; 10
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	50 e0       	ldi	r21, 0x00	; 0
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 b0 19 	call	0x3360	; 0x3360 <__udivmodsi4>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
    27c0:	8b 81       	ldd	r24, Y+3	; 0x03
    27c2:	9c 81       	ldd	r25, Y+4	; 0x04
    27c4:	ad 81       	ldd	r26, Y+5	; 0x05
    27c6:	be 81       	ldd	r27, Y+6	; 0x06
    27c8:	2a e0       	ldi	r18, 0x0A	; 10
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsi3>
    27d8:	9b 01       	movw	r18, r22
    27da:	ac 01       	movw	r20, r24
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	88 2f       	mov	r24, r24
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e0       	ldi	r26, 0x00	; 0
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	82 0f       	add	r24, r18
    27e8:	93 1f       	adc	r25, r19
    27ea:	a4 1f       	adc	r26, r20
    27ec:	b5 1f       	adc	r27, r21
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	ad 83       	std	Y+5, r26	; 0x05
    27f4:	be 83       	std	Y+6, r27	; 0x06
			Copy_u32IntNumber /= 10;
    27f6:	8f 81       	ldd	r24, Y+7	; 0x07
    27f8:	98 85       	ldd	r25, Y+8	; 0x08
    27fa:	a9 85       	ldd	r26, Y+9	; 0x09
    27fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    27fe:	2a e0       	ldi	r18, 0x0A	; 10
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e0       	ldi	r20, 0x00	; 0
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 b0 19 	call	0x3360	; 0x3360 <__udivmodsi4>
    280e:	da 01       	movw	r26, r20
    2810:	c9 01       	movw	r24, r18
    2812:	8f 83       	std	Y+7, r24	; 0x07
    2814:	98 87       	std	Y+8, r25	; 0x08
    2816:	a9 87       	std	Y+9, r26	; 0x09
    2818:	ba 87       	std	Y+10, r27	; 0x0a
			counter++;
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	8f 5f       	subi	r24, 0xFF	; 255
    281e:	89 83       	std	Y+1, r24	; 0x01
void LCD_vidSendInt(u32 Copy_u32IntNumber){
	if(Copy_u32IntNumber != 0){
		u32 local_u32NewNumber = 0;
		u8 local_u8NewDigit = 0;
		u8 counter = 0;
		while(Copy_u32IntNumber !=0){
    2820:	8f 81       	ldd	r24, Y+7	; 0x07
    2822:	98 85       	ldd	r25, Y+8	; 0x08
    2824:	a9 85       	ldd	r26, Y+9	; 0x09
    2826:	ba 85       	ldd	r27, Y+10	; 0x0a
    2828:	00 97       	sbiw	r24, 0x00	; 0
    282a:	a1 05       	cpc	r26, r1
    282c:	b1 05       	cpc	r27, r1
    282e:	09 f0       	breq	.+2      	; 0x2832 <LCD_vidSendInt+0xcc>
    2830:	b8 cf       	rjmp	.-144    	; 0x27a2 <LCD_vidSendInt+0x3c>
    2832:	28 c0       	rjmp	.+80     	; 0x2884 <LCD_vidSendInt+0x11e>
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
			local_u8NewDigit = local_u32NewNumber % 10;
    2834:	8b 81       	ldd	r24, Y+3	; 0x03
    2836:	9c 81       	ldd	r25, Y+4	; 0x04
    2838:	ad 81       	ldd	r26, Y+5	; 0x05
    283a:	be 81       	ldd	r27, Y+6	; 0x06
    283c:	2a e0       	ldi	r18, 0x0A	; 10
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e0       	ldi	r20, 0x00	; 0
    2842:	50 e0       	ldi	r21, 0x00	; 0
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 b0 19 	call	0x3360	; 0x3360 <__udivmodsi4>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8a 83       	std	Y+2, r24	; 0x02
			local_u32NewNumber /= 10;
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	ad 81       	ldd	r26, Y+5	; 0x05
    2858:	be 81       	ldd	r27, Y+6	; 0x06
    285a:	2a e0       	ldi	r18, 0x0A	; 10
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e0       	ldi	r20, 0x00	; 0
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 b0 19 	call	0x3360	; 0x3360 <__udivmodsi4>
    286a:	da 01       	movw	r26, r20
    286c:	c9 01       	movw	r24, r18
    286e:	8b 83       	std	Y+3, r24	; 0x03
    2870:	9c 83       	std	Y+4, r25	; 0x04
    2872:	ad 83       	std	Y+5, r26	; 0x05
    2874:	be 83       	std	Y+6, r27	; 0x06
			LCD_vidWriteChar('0' + local_u8NewDigit);
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	80 5d       	subi	r24, 0xD0	; 208
    287a:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_vidWriteChar>
			counter--;
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber = (local_u32NewNumber * 10) + local_u8NewDigit;
			Copy_u32IntNumber /= 10;
			counter++;
		}

		while(local_u32NewNumber !=0 ){
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	ad 81       	ldd	r26, Y+5	; 0x05
    288a:	be 81       	ldd	r27, Y+6	; 0x06
    288c:	00 97       	sbiw	r24, 0x00	; 0
    288e:	a1 05       	cpc	r26, r1
    2890:	b1 05       	cpc	r27, r1
    2892:	81 f6       	brne	.-96     	; 0x2834 <LCD_vidSendInt+0xce>
    2894:	06 c0       	rjmp	.+12     	; 0x28a2 <LCD_vidSendInt+0x13c>
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
			LCD_vidWriteChar('0');
    2896:	80 e3       	ldi	r24, 0x30	; 48
    2898:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_vidWriteChar>
			counter--;
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	81 50       	subi	r24, 0x01	; 1
    28a0:	89 83       	std	Y+1, r24	; 0x01
			local_u32NewNumber /= 10;
			LCD_vidWriteChar('0' + local_u8NewDigit);
			counter--;
		}

		while(counter !=0){
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	88 23       	and	r24, r24
    28a6:	b9 f7       	brne	.-18     	; 0x2896 <LCD_vidSendInt+0x130>
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <LCD_vidSendInt+0x14a>
			LCD_vidWriteChar('0');
			counter--;
		}
	}else{
		LCD_vidWriteChar('0');
    28aa:	80 e3       	ldi	r24, 0x30	; 48
    28ac:	0e 94 85 11 	call	0x230a	; 0x230a <LCD_vidWriteChar>
	}

}
    28b0:	2a 96       	adiw	r28, 0x0a	; 10
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <LCD_vidShiftDisplayRight>:

//function to shift right
void LCD_vidShiftDisplayRight(void){
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	0f 92       	push	r0
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayRightCmd = SHIFT_ENTIRE_DISPLAY ;
    28cc:	88 e1       	ldi	r24, 0x18	; 24
    28ce:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftDisplayRightCmd, 2);
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	84 60       	ori	r24, 0x04	; 4
    28d4:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayRightCmd);
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
}
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <LCD_vidShiftDisplayLeft>:

//function to shift left
void LCD_vidShiftDisplayLeft(void){
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	0f 92       	push	r0
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftDisplayLeftCmd = SHIFT_ENTIRE_DISPLAY;
    28ee:	88 e1       	ldi	r24, 0x18	; 24
    28f0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftDisplayLeftCmd, 2);
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	8b 7f       	andi	r24, 0xFB	; 251
    28f6:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftDisplayLeftCmd);
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
}
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <LCD_vidShiftCursorLeft>:

//function to shift the cursor left
void LCD_vidShiftCursorLeft(void){
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorLeftCmd = SHIFT_CURSOR;
    2910:	80 e1       	ldi	r24, 0x10	; 16
    2912:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(local_u8ShiftCursorLeftCmd, 2);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	8b 7f       	andi	r24, 0xFB	; 251
    2918:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorLeftCmd);
    291a:	89 81       	ldd	r24, Y+1	; 0x01
    291c:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
}
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <LCD_vidShiftCursorRight>:
//function to shift the cursor right
void LCD_vidShiftCursorRight(void){
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	0f 92       	push	r0
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8ShiftCursorRightCmd = SHIFT_CURSOR;
    2932:	80 e1       	ldi	r24, 0x10	; 16
    2934:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(local_u8ShiftCursorRightCmd, 2);
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	84 60       	ori	r24, 0x04	; 4
    293a:	89 83       	std	Y+1, r24	; 0x01
	LCD_vidSendCmd(local_u8ShiftCursorRightCmd);
    293c:	89 81       	ldd	r24, Y+1	; 0x01
    293e:	0e 94 9b 10 	call	0x2136	; 0x2136 <LCD_vidSendCmd>
}
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <FLEX_vidInit>:
#include "../../MCAL/ADC_Driver_V1/ADC_int.h"
#include "FLEX_Sensor_cfg.h"
#include "FLEX_Sensor_err.h"
#include "FLEX_Sensor_int.h"

void FLEX_vidInit(void){
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
	ADC_vidInit();
    2952:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ADC_vidInit>
}
    2956:	cf 91       	pop	r28
    2958:	df 91       	pop	r29
    295a:	08 95       	ret

0000295c <FLEX_u8GetVolageValue_mv>:

u8 FLEX_u8GetVolageValue_mv(e_FLEX_sensor_No Copy_e_FLEX_sensor_No_FlexNumber, f64 *Copy_f32VolValPtr){
    295c:	df 93       	push	r29
    295e:	cf 93       	push	r28
    2960:	00 d0       	rcall	.+0      	; 0x2962 <FLEX_u8GetVolageValue_mv+0x6>
    2962:	00 d0       	rcall	.+0      	; 0x2964 <FLEX_u8GetVolageValue_mv+0x8>
    2964:	00 d0       	rcall	.+0      	; 0x2966 <FLEX_u8GetVolageValue_mv+0xa>
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
    296a:	8a 83       	std	Y+2, r24	; 0x02
    296c:	7c 83       	std	Y+4, r23	; 0x04
    296e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorStatus =  FLEX_GET_VALUE_RT_IS_OK;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_e_FLEX_sensor_No_FlexNumber){
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	3e 83       	std	Y+6, r19	; 0x06
    297c:	2d 83       	std	Y+5, r18	; 0x05
    297e:	8d 81       	ldd	r24, Y+5	; 0x05
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	83 30       	cpi	r24, 0x03	; 3
    2984:	91 05       	cpc	r25, r1
    2986:	99 f1       	breq	.+102    	; 0x29ee <FLEX_u8GetVolageValue_mv+0x92>
    2988:	2d 81       	ldd	r18, Y+5	; 0x05
    298a:	3e 81       	ldd	r19, Y+6	; 0x06
    298c:	24 30       	cpi	r18, 0x04	; 4
    298e:	31 05       	cpc	r19, r1
    2990:	7c f4       	brge	.+30     	; 0x29b0 <FLEX_u8GetVolageValue_mv+0x54>
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	91 05       	cpc	r25, r1
    299a:	19 f1       	breq	.+70     	; 0x29e2 <FLEX_u8GetVolageValue_mv+0x86>
    299c:	2d 81       	ldd	r18, Y+5	; 0x05
    299e:	3e 81       	ldd	r19, Y+6	; 0x06
    29a0:	22 30       	cpi	r18, 0x02	; 2
    29a2:	31 05       	cpc	r19, r1
    29a4:	0c f5       	brge	.+66     	; 0x29e8 <FLEX_u8GetVolageValue_mv+0x8c>
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	b9 f0       	breq	.+46     	; 0x29dc <FLEX_u8GetVolageValue_mv+0x80>
    29ae:	65 c0       	rjmp	.+202    	; 0x2a7a <FLEX_u8GetVolageValue_mv+0x11e>
    29b0:	2d 81       	ldd	r18, Y+5	; 0x05
    29b2:	3e 81       	ldd	r19, Y+6	; 0x06
    29b4:	25 30       	cpi	r18, 0x05	; 5
    29b6:	31 05       	cpc	r19, r1
    29b8:	b1 f1       	breq	.+108    	; 0x2a26 <FLEX_u8GetVolageValue_mv+0xca>
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	85 30       	cpi	r24, 0x05	; 5
    29c0:	91 05       	cpc	r25, r1
    29c2:	1c f1       	brlt	.+70     	; 0x2a0a <FLEX_u8GetVolageValue_mv+0xae>
    29c4:	2d 81       	ldd	r18, Y+5	; 0x05
    29c6:	3e 81       	ldd	r19, Y+6	; 0x06
    29c8:	26 30       	cpi	r18, 0x06	; 6
    29ca:	31 05       	cpc	r19, r1
    29cc:	d1 f1       	breq	.+116    	; 0x2a42 <FLEX_u8GetVolageValue_mv+0xe6>
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	87 30       	cpi	r24, 0x07	; 7
    29d4:	91 05       	cpc	r25, r1
    29d6:	09 f4       	brne	.+2      	; 0x29da <FLEX_u8GetVolageValue_mv+0x7e>
    29d8:	42 c0       	rjmp	.+132    	; 0x2a5e <FLEX_u8GetVolageValue_mv+0x102>
    29da:	4f c0       	rjmp	.+158    	; 0x2a7a <FLEX_u8GetVolageValue_mv+0x11e>
	case e_FLEX_sensor_No_0:
#if FLEX_SENSOR_0_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC0);
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
#else
		Local_u8ErrorStatus = FLEX_GET_VALUE_RT_IS_SENSOR_NOT_ENABLED;
    29dc:	82 e0       	ldi	r24, 0x02	; 2
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	4e c0       	rjmp	.+156    	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>
	case e_FLEX_sensor_No_1:
#if FLEX_SENSOR_1_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC1);
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
#else
		Local_u8ErrorStatus = FLEX_GET_VALUE_RT_IS_SENSOR_NOT_ENABLED;
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	4b c0       	rjmp	.+150    	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>
	case e_FLEX_sensor_No_2:
#if FLEX_SENSOR_2_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC2);
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
#else
		Local_u8ErrorStatus = FLEX_GET_VALUE_RT_IS_SENSOR_NOT_ENABLED;
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	48 c0       	rjmp	.+144    	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>
#endif
		break;

	case e_FLEX_sensor_No_3:
#if FLEX_SENSOR_3_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC3);
    29ee:	83 e0       	ldi	r24, 0x03	; 3
    29f0:	0e 94 92 0c 	call	0x1924	; 0x1924 <ADC_vidStartSignleConv>
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
    29f4:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <ADC_f32GetAnalogValue_mv>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	eb 81       	ldd	r30, Y+3	; 0x03
    29fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
    2a08:	3a c0       	rjmp	.+116    	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>

#endif
		break;
	case e_FLEX_sensor_No_4:
#if FLEX_SENSOR_4_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC4);
    2a0a:	84 e0       	ldi	r24, 0x04	; 4
    2a0c:	0e 94 92 0c 	call	0x1924	; 0x1924 <ADC_vidStartSignleConv>
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
    2a10:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <ADC_f32GetAnalogValue_mv>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	eb 81       	ldd	r30, Y+3	; 0x03
    2a1a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a1c:	80 83       	st	Z, r24
    2a1e:	91 83       	std	Z+1, r25	; 0x01
    2a20:	a2 83       	std	Z+2, r26	; 0x02
    2a22:	b3 83       	std	Z+3, r27	; 0x03
    2a24:	2c c0       	rjmp	.+88     	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>

#endif
		break;
	case e_FLEX_sensor_No_5:
#if FLEX_SENSOR_5_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC5);
    2a26:	85 e0       	ldi	r24, 0x05	; 5
    2a28:	0e 94 92 0c 	call	0x1924	; 0x1924 <ADC_vidStartSignleConv>
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
    2a2c:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <ADC_f32GetAnalogValue_mv>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	eb 81       	ldd	r30, Y+3	; 0x03
    2a36:	fc 81       	ldd	r31, Y+4	; 0x04
    2a38:	80 83       	st	Z, r24
    2a3a:	91 83       	std	Z+1, r25	; 0x01
    2a3c:	a2 83       	std	Z+2, r26	; 0x02
    2a3e:	b3 83       	std	Z+3, r27	; 0x03
    2a40:	1e c0       	rjmp	.+60     	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>

#endif
		break;
	case e_FLEX_sensor_No_6:
#if FLEX_SENSOR_6_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC6);
    2a42:	86 e0       	ldi	r24, 0x06	; 6
    2a44:	0e 94 92 0c 	call	0x1924	; 0x1924 <ADC_vidStartSignleConv>
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
    2a48:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <ADC_f32GetAnalogValue_mv>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	eb 81       	ldd	r30, Y+3	; 0x03
    2a52:	fc 81       	ldd	r31, Y+4	; 0x04
    2a54:	80 83       	st	Z, r24
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	a2 83       	std	Z+2, r26	; 0x02
    2a5a:	b3 83       	std	Z+3, r27	; 0x03
    2a5c:	10 c0       	rjmp	.+32     	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>

#endif
		break;
	case e_FLEX_sensor_No_7:
#if FLEX_SENSOR_7_STATUS == ENABLE
		ADC_vidStartSignleConv(e_ADC_channel_opt_ADC7);
    2a5e:	87 e0       	ldi	r24, 0x07	; 7
    2a60:	0e 94 92 0c 	call	0x1924	; 0x1924 <ADC_vidStartSignleConv>
		*Copy_f32VolValPtr = ADC_f32GetAnalogValue_mv();
    2a64:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <ADC_f32GetAnalogValue_mv>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <FLEX_u8GetVolageValue_mv+0x122>
#else
		Local_u8ErrorStatus = FLEX_GET_VALUE_RT_IS_SENSOR_NOT_ENABLED;

#endif
		break;
	default: Local_u8ErrorStatus = FLEX_GET_VALUE_RT_IS_WRONG_SENSOR_NUMBER ;
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	89 83       	std	Y+1, r24	; 0x01
	};
	return Local_u8ErrorStatus;
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a80:	26 96       	adiw	r28, 0x06	; 6
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <FLEX_u8GetResValue_ohm>:


u8 FLEX_u8GetResValue_ohm(e_FLEX_sensor_No Copy_e_FLEX_sensor_No_FlexNumber, f64 *Copy_f32ResValPtr){
    2a92:	df 93       	push	r29
    2a94:	cf 93       	push	r28
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	28 97       	sbiw	r28, 0x08	; 8
    2a9c:	0f b6       	in	r0, 0x3f	; 63
    2a9e:	f8 94       	cli
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	0f be       	out	0x3f, r0	; 63
    2aa4:	cd bf       	out	0x3d, r28	; 61
    2aa6:	8e 83       	std	Y+6, r24	; 0x06
    2aa8:	78 87       	std	Y+8, r23	; 0x08
    2aaa:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorStatus = FLEX_GET_VALUE_RT_IS_OK;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	89 83       	std	Y+1, r24	; 0x01
	f32 Local_f32OutputVoltageValue_mv = 0;
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	a0 e0       	ldi	r26, 0x00	; 0
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	8a 83       	std	Y+2, r24	; 0x02
    2aba:	9b 83       	std	Y+3, r25	; 0x03
    2abc:	ac 83       	std	Y+4, r26	; 0x04
    2abe:	bd 83       	std	Y+5, r27	; 0x05
	Local_u8ErrorStatus = FLEX_u8GetVolageValue_mv(Copy_e_FLEX_sensor_No_FlexNumber, &Local_f32OutputVoltageValue_mv);
    2ac0:	9e 01       	movw	r18, r28
    2ac2:	2e 5f       	subi	r18, 0xFE	; 254
    2ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	b9 01       	movw	r22, r18
    2aca:	0e 94 ae 14 	call	0x295c	; 0x295c <FLEX_u8GetVolageValue_mv>
    2ace:	89 83       	std	Y+1, r24	; 0x01
	*Copy_f32ResValPtr = (Local_f32OutputVoltageValue_mv * (f64)(FIXED_RESISTOR_VALUE_OHM)) / ( ((f64)(VCC_VALUE_VOLT * 1000)) - Local_f32OutputVoltageValue_mv);

#elif CONNECTION_TYPE == PULL_DOWN

	//From the voltage divider rule
	*Copy_f32ResValPtr = ( ( (f64) (FIXED_RESISTOR_VALUE_OHM ) ) * ((f64)(VCC_VALUE_VOLT * 1000) - Local_f32OutputVoltageValue_mv) ) / Local_f32OutputVoltageValue_mv;
    2ad0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ad2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ad4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ad6:	5d 81       	ldd	r21, Y+5	; 0x05
    2ad8:	60 e0       	ldi	r22, 0x00	; 0
    2ada:	70 e4       	ldi	r23, 0x40	; 64
    2adc:	8c e9       	ldi	r24, 0x9C	; 156
    2ade:	95 e4       	ldi	r25, 0x45	; 69
    2ae0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	bc 01       	movw	r22, r24
    2aea:	cd 01       	movw	r24, r26
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	46 e9       	ldi	r20, 0x96	; 150
    2af2:	53 e4       	ldi	r21, 0x43	; 67
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	2a 81       	ldd	r18, Y+2	; 0x02
    2afe:	3b 81       	ldd	r19, Y+3	; 0x03
    2b00:	4c 81       	ldd	r20, Y+4	; 0x04
    2b02:	5d 81       	ldd	r21, Y+5	; 0x05
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	ef 81       	ldd	r30, Y+7	; 0x07
    2b12:	f8 85       	ldd	r31, Y+8	; 0x08
    2b14:	80 83       	st	Z, r24
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	a2 83       	std	Z+2, r26	; 0x02
    2b1a:	b3 83       	std	Z+3, r27	; 0x03

#endif

	return Local_u8ErrorStatus;
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b1e:	28 96       	adiw	r28, 0x08	; 8
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <DFPLAYER_Init>:

#include "../../MCAL/USART_Driver_V1/USART_ErrorTypes.h"
#include "../../MCAL/USART_Driver_V1/USART_Init.h"

DFPLAYER_Error_t DFPLAYER_Init(void)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	2b 97       	sbiw	r28, 0x0b	; 11
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
	DFPLAYER_Error_t Local_ErrorStatus = DFPLAYER_Error_t_RT_OK;
    2b44:	19 82       	std	Y+1, r1	; 0x01

	USART_Config_t Local_u8_USART_obj = {USART_Enable_t_TXAndRXEnable, USART_CharcterSize_t_8, USART_ParityMode_t_Disable, USART_StopBitSlct_t_OneBit, USART_Speed_t_NormalSpeed};
    2b46:	ce 01       	movw	r24, r28
    2b48:	02 96       	adiw	r24, 0x02	; 2
    2b4a:	98 87       	std	Y+8, r25	; 0x08
    2b4c:	8f 83       	std	Y+7, r24	; 0x07
    2b4e:	e8 e8       	ldi	r30, 0x88	; 136
    2b50:	f1 e0       	ldi	r31, 0x01	; 1
    2b52:	fa 87       	std	Y+10, r31	; 0x0a
    2b54:	e9 87       	std	Y+9, r30	; 0x09
    2b56:	f5 e0       	ldi	r31, 0x05	; 5
    2b58:	fb 87       	std	Y+11, r31	; 0x0b
    2b5a:	e9 85       	ldd	r30, Y+9	; 0x09
    2b5c:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b5e:	00 80       	ld	r0, Z
    2b60:	89 85       	ldd	r24, Y+9	; 0x09
    2b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	9a 87       	std	Y+10, r25	; 0x0a
    2b68:	89 87       	std	Y+9, r24	; 0x09
    2b6a:	ef 81       	ldd	r30, Y+7	; 0x07
    2b6c:	f8 85       	ldd	r31, Y+8	; 0x08
    2b6e:	00 82       	st	Z, r0
    2b70:	8f 81       	ldd	r24, Y+7	; 0x07
    2b72:	98 85       	ldd	r25, Y+8	; 0x08
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	98 87       	std	Y+8, r25	; 0x08
    2b78:	8f 83       	std	Y+7, r24	; 0x07
    2b7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b7c:	91 50       	subi	r25, 0x01	; 1
    2b7e:	9b 87       	std	Y+11, r25	; 0x0b
    2b80:	eb 85       	ldd	r30, Y+11	; 0x0b
    2b82:	ee 23       	and	r30, r30
    2b84:	51 f7       	brne	.-44     	; 0x2b5a <DFPLAYER_Init+0x2a>

	USART_init(&Local_u8_USART_obj);
    2b86:	ce 01       	movw	r24, r28
    2b88:	02 96       	adiw	r24, 0x02	; 2
    2b8a:	0e 94 47 07 	call	0xe8e	; 0xe8e <USART_init>

	return Local_ErrorStatus;
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b90:	2b 96       	adiw	r28, 0x0b	; 11
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	cf 91       	pop	r28
    2b9e:	df 91       	pop	r29
    2ba0:	08 95       	ret

00002ba2 <DFPLAYER_SendCMD>:

DFPLAYER_Error_t DFPLAYER_SendCMD(u8 Copy_u8Command, u16 Copy_u16Parameter)
{
    2ba2:	df 93       	push	r29
    2ba4:	cf 93       	push	r28
    2ba6:	00 d0       	rcall	.+0      	; 0x2ba8 <DFPLAYER_SendCMD+0x6>
    2ba8:	00 d0       	rcall	.+0      	; 0x2baa <DFPLAYER_SendCMD+0x8>
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <DFPLAYER_SendCMD+0xa>
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	8c 83       	std	Y+4, r24	; 0x04
    2bb2:	7e 83       	std	Y+6, r23	; 0x06
    2bb4:	6d 83       	std	Y+5, r22	; 0x05
	DFPLAYER_Error_t Local_ErrorStatus = DFPLAYER_Error_t_RT_OK;
    2bb6:	1b 82       	std	Y+3, r1	; 0x03

	s16 Local_s16Checksum = 0;
    2bb8:	1a 82       	std	Y+2, r1	; 0x02
    2bba:	19 82       	std	Y+1, r1	; 0x01

	Local_s16Checksum = -(DFPLAYER_VERSION + DFPLAYER_LENGTH + Copy_u8Command + DFPLAYER_FEEDBACK + ((u8)(Copy_u16Parameter>>8))
    2bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8b ef       	ldi	r24, 0xFB	; 251
    2bc4:	9e ef       	ldi	r25, 0xFE	; 254
    2bc6:	ac 01       	movw	r20, r24
    2bc8:	42 1b       	sub	r20, r18
    2bca:	53 0b       	sbc	r21, r19
    2bcc:	9a 01       	movw	r18, r20
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	89 2f       	mov	r24, r25
    2bd4:	99 27       	eor	r25, r25
    2bd6:	88 2f       	mov	r24, r24
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	28 1b       	sub	r18, r24
    2bdc:	39 0b       	sbc	r19, r25
    2bde:	8d 81       	ldd	r24, Y+5	; 0x05
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	a9 01       	movw	r20, r18
    2be6:	48 1b       	sub	r20, r24
    2be8:	59 0b       	sbc	r21, r25
    2bea:	ca 01       	movw	r24, r20
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
			+ ((u8)Copy_u16Parameter) );


	if((Copy_u8Command >= DFPLAYER_CMD_t_Next) && (Copy_u8Command <= DFPLAYER_CMD_t_Queries_the_current_track_of_Flash))
    2bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf2:	88 23       	and	r24, r24
    2bf4:	91 f1       	breq	.+100    	; 0x2c5a <DFPLAYER_SendCMD+0xb8>
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	8e 34       	cpi	r24, 0x4E	; 78
    2bfa:	78 f5       	brcc	.+94     	; 0x2c5a <DFPLAYER_SendCMD+0xb8>
	{
		USART_SendData(DFPLAYER_START);
    2bfc:	8e e7       	ldi	r24, 0x7E	; 126
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(DFPLAYER_VERSION);
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(DFPLAYER_LENGTH);
    2c0c:	86 e0       	ldi	r24, 0x06	; 6
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(Copy_u8Command);
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	88 2f       	mov	r24, r24
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(DFPLAYER_FEEDBACK);
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData((Copy_u16Parameter>>8));			//MSB of the parameter
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	89 2f       	mov	r24, r25
    2c2c:	99 27       	eor	r25, r25
    2c2e:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(Copy_u16Parameter);				//LSB of the parameter
    2c32:	8d 81       	ldd	r24, Y+5	; 0x05
    2c34:	9e 81       	ldd	r25, Y+6	; 0x06
    2c36:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData((Local_s16Checksum>>8));			//MSB of the checksum
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c3e:	89 2f       	mov	r24, r25
    2c40:	99 0f       	add	r25, r25
    2c42:	99 0b       	sbc	r25, r25
    2c44:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(Local_s16Checksum);
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c4c:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
		USART_SendData(DFPLAYER_END);
    2c50:	8f ee       	ldi	r24, 0xEF	; 239
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	0e 94 f8 07 	call	0xff0	; 0xff0 <USART_SendData>
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <DFPLAYER_SendCMD+0xbc>
	}
	else
	{
		Local_ErrorStatus = DFPLAYER_Error_t_RT_WRONG_CMD;
    2c5a:	81 e0       	ldi	r24, 0x01	; 1
    2c5c:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_ErrorStatus;
    2c5e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c60:	26 96       	adiw	r28, 0x06	; 6
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	cf 91       	pop	r28
    2c6e:	df 91       	pop	r29
    2c70:	08 95       	ret

00002c72 <main>:

void read_sensors(void);
void mapping(f64 sensor_read, u8 sensor_no);
u8 global_arr[8];
u8 APP_SOUND_TRACK_ARRAY[5]={0};
void main(void){
    2c72:	df 93       	push	r29
    2c74:	cf 93       	push	r28
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	2f 97       	sbiw	r28, 0x0f	; 15
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Counter;
	DFPLAYER_Init();
    2c86:	0e 94 98 15 	call	0x2b30	; 0x2b30 <DFPLAYER_Init>

	LCD_vidInit();
    2c8a:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_vidInit>
	FLEX_vidInit();
    2c8e:	0e 94 a5 14 	call	0x294a	; 0x294a <FLEX_vidInit>
	//	f64 output_voltage_mv = 0;
	//	f64 sensor_res_ohm = 0;
	while(1){
		read_sensors();
    2c92:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <read_sensors>
		DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_volume,30);
    2c96:	86 e0       	ldi	r24, 0x06	; 6
    2c98:	6e e1       	ldi	r22, 0x1E	; 30
    2c9a:	70 e0       	ldi	r23, 0x00	; 0
    2c9c:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DFPLAYER_SendCMD>

		if(global_arr[SENSOR_ONE] == 'A' && global_arr[SENSOR_TWO] == 'A' && global_arr[SENSOR_THREE] == 'A'
    2ca0:	80 91 9a 01 	lds	r24, 0x019A
    2ca4:	81 34       	cpi	r24, 0x41	; 65
    2ca6:	a9 f5       	brne	.+106    	; 0x2d12 <main+0xa0>
    2ca8:	80 91 9b 01 	lds	r24, 0x019B
    2cac:	81 34       	cpi	r24, 0x41	; 65
    2cae:	89 f5       	brne	.+98     	; 0x2d12 <main+0xa0>
    2cb0:	80 91 9c 01 	lds	r24, 0x019C
    2cb4:	81 34       	cpi	r24, 0x41	; 65
    2cb6:	69 f5       	brne	.+90     	; 0x2d12 <main+0xa0>
    2cb8:	80 91 9d 01 	lds	r24, 0x019D
    2cbc:	81 34       	cpi	r24, 0x41	; 65
    2cbe:	49 f5       	brne	.+82     	; 0x2d12 <main+0xa0>
    2cc0:	80 91 9e 01 	lds	r24, 0x019E
    2cc4:	81 34       	cpi	r24, 0x41	; 65
    2cc6:	29 f5       	brne	.+74     	; 0x2d12 <main+0xa0>
				&& global_arr[SENSOR_FOUR] == 'A' && global_arr[SENSOR_FIVE] == 'A')
		{
			LCD_u8Goto(2, 10);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	6a e0       	ldi	r22, 0x0A	; 10
    2ccc:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
			LCD_vidSendString((u8 *)"Five");
    2cd0:	80 e6       	ldi	r24, 0x60	; 96
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_vidSendString>
			if(APP_SOUND_TRACK_ARRAY[4] == 0)
    2cd8:	80 91 96 01 	lds	r24, 0x0196
    2cdc:	88 23       	and	r24, r24
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <main+0x70>
    2ce0:	17 c1       	rjmp	.+558    	; 0x2f10 <main+0x29e>
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,5);
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	65 e0       	ldi	r22, 0x05	; 5
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DFPLAYER_SendCMD>
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2cec:	1f 86       	std	Y+15, r1	; 0x0f
    2cee:	0a c0       	rjmp	.+20     	; 0x2d04 <main+0x92>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
    2cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	ee 56       	subi	r30, 0x6E	; 110
    2cfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2cfc:	10 82       	st	Z, r1
			LCD_u8Goto(2, 10);
			LCD_vidSendString((u8 *)"Five");
			if(APP_SOUND_TRACK_ARRAY[4] == 0)
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,5);
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	8f 87       	std	Y+15, r24	; 0x0f
    2d04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d06:	85 30       	cpi	r24, 0x05	; 5
    2d08:	98 f3       	brcs	.-26     	; 0x2cf0 <main+0x7e>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
				}
				APP_SOUND_TRACK_ARRAY[4] =1;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	80 93 96 01 	sts	0x0196, r24
    2d10:	ff c0       	rjmp	.+510    	; 0x2f10 <main+0x29e>
			}


		}

		else if(global_arr[SENSOR_ONE] == 'A' && global_arr[SENSOR_TWO] == 'B' && global_arr[SENSOR_THREE] == 'B'
    2d12:	80 91 9a 01 	lds	r24, 0x019A
    2d16:	81 34       	cpi	r24, 0x41	; 65
    2d18:	c9 f4       	brne	.+50     	; 0x2d4c <main+0xda>
    2d1a:	80 91 9b 01 	lds	r24, 0x019B
    2d1e:	82 34       	cpi	r24, 0x42	; 66
    2d20:	a9 f4       	brne	.+42     	; 0x2d4c <main+0xda>
    2d22:	80 91 9c 01 	lds	r24, 0x019C
    2d26:	82 34       	cpi	r24, 0x42	; 66
    2d28:	89 f4       	brne	.+34     	; 0x2d4c <main+0xda>
    2d2a:	80 91 9d 01 	lds	r24, 0x019D
    2d2e:	82 34       	cpi	r24, 0x42	; 66
    2d30:	69 f4       	brne	.+26     	; 0x2d4c <main+0xda>
    2d32:	80 91 9e 01 	lds	r24, 0x019E
    2d36:	82 34       	cpi	r24, 0x42	; 66
    2d38:	49 f4       	brne	.+18     	; 0x2d4c <main+0xda>
				&& global_arr[SENSOR_FOUR] == 'B' && global_arr[SENSOR_FIVE] == 'B')
		{
			LCD_u8Goto(2, 10);
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	6a e0       	ldi	r22, 0x0A	; 10
    2d3e:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
			LCD_vidSendString((u8 *)"ThumbUp");
    2d42:	85 e6       	ldi	r24, 0x65	; 101
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_vidSendString>
    2d4a:	e2 c0       	rjmp	.+452    	; 0x2f10 <main+0x29e>
		}
		else if(global_arr[SENSOR_ONE] == 'B' && global_arr[SENSOR_TWO] == 'A' && global_arr[SENSOR_THREE] == 'B'
    2d4c:	80 91 9a 01 	lds	r24, 0x019A
    2d50:	82 34       	cpi	r24, 0x42	; 66
    2d52:	a9 f5       	brne	.+106    	; 0x2dbe <main+0x14c>
    2d54:	80 91 9b 01 	lds	r24, 0x019B
    2d58:	81 34       	cpi	r24, 0x41	; 65
    2d5a:	89 f5       	brne	.+98     	; 0x2dbe <main+0x14c>
    2d5c:	80 91 9c 01 	lds	r24, 0x019C
    2d60:	82 34       	cpi	r24, 0x42	; 66
    2d62:	69 f5       	brne	.+90     	; 0x2dbe <main+0x14c>
    2d64:	80 91 9d 01 	lds	r24, 0x019D
    2d68:	82 34       	cpi	r24, 0x42	; 66
    2d6a:	49 f5       	brne	.+82     	; 0x2dbe <main+0x14c>
    2d6c:	80 91 9e 01 	lds	r24, 0x019E
    2d70:	82 34       	cpi	r24, 0x42	; 66
    2d72:	29 f5       	brne	.+74     	; 0x2dbe <main+0x14c>
				&& global_arr[SENSOR_FOUR] == 'B' && global_arr[SENSOR_FIVE] == 'B')
		{
			LCD_u8Goto(2, 10);
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	6a e0       	ldi	r22, 0x0A	; 10
    2d78:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
			LCD_vidSendString((u8 *)"One");
    2d7c:	8d e6       	ldi	r24, 0x6D	; 109
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_vidSendString>
			if(APP_SOUND_TRACK_ARRAY[0] == 0)
    2d84:	80 91 92 01 	lds	r24, 0x0192
    2d88:	88 23       	and	r24, r24
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <main+0x11c>
    2d8c:	c1 c0       	rjmp	.+386    	; 0x2f10 <main+0x29e>
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,1);
    2d8e:	83 e0       	ldi	r24, 0x03	; 3
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	70 e0       	ldi	r23, 0x00	; 0
    2d94:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DFPLAYER_SendCMD>
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2d98:	1f 86       	std	Y+15, r1	; 0x0f
    2d9a:	0a c0       	rjmp	.+20     	; 0x2db0 <main+0x13e>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
    2d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	fc 01       	movw	r30, r24
    2da4:	ee 56       	subi	r30, 0x6E	; 110
    2da6:	fe 4f       	sbci	r31, 0xFE	; 254
    2da8:	10 82       	st	Z, r1
			LCD_u8Goto(2, 10);
			LCD_vidSendString((u8 *)"One");
			if(APP_SOUND_TRACK_ARRAY[0] == 0)
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,1);
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dac:	8f 5f       	subi	r24, 0xFF	; 255
    2dae:	8f 87       	std	Y+15, r24	; 0x0f
    2db0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db2:	85 30       	cpi	r24, 0x05	; 5
    2db4:	98 f3       	brcs	.-26     	; 0x2d9c <main+0x12a>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
				}
				APP_SOUND_TRACK_ARRAY[0] =1;
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	80 93 92 01 	sts	0x0192, r24
    2dbc:	a9 c0       	rjmp	.+338    	; 0x2f10 <main+0x29e>
			else
			{
				//DoNothing
			}
		}
		else if(global_arr[SENSOR_ONE] == 'B' && global_arr[SENSOR_TWO] == 'A' && global_arr[SENSOR_THREE] == 'A'
    2dbe:	80 91 9a 01 	lds	r24, 0x019A
    2dc2:	82 34       	cpi	r24, 0x42	; 66
    2dc4:	a9 f5       	brne	.+106    	; 0x2e30 <main+0x1be>
    2dc6:	80 91 9b 01 	lds	r24, 0x019B
    2dca:	81 34       	cpi	r24, 0x41	; 65
    2dcc:	89 f5       	brne	.+98     	; 0x2e30 <main+0x1be>
    2dce:	80 91 9c 01 	lds	r24, 0x019C
    2dd2:	81 34       	cpi	r24, 0x41	; 65
    2dd4:	69 f5       	brne	.+90     	; 0x2e30 <main+0x1be>
    2dd6:	80 91 9d 01 	lds	r24, 0x019D
    2dda:	82 34       	cpi	r24, 0x42	; 66
    2ddc:	49 f5       	brne	.+82     	; 0x2e30 <main+0x1be>
    2dde:	80 91 9e 01 	lds	r24, 0x019E
    2de2:	82 34       	cpi	r24, 0x42	; 66
    2de4:	29 f5       	brne	.+74     	; 0x2e30 <main+0x1be>
				&& global_arr[SENSOR_FOUR] == 'B' && global_arr[SENSOR_FIVE] == 'B')
		{
			LCD_u8Goto(2, 10);
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	6a e0       	ldi	r22, 0x0A	; 10
    2dea:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
			LCD_vidSendString((u8 *)"Two");
    2dee:	81 e7       	ldi	r24, 0x71	; 113
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_vidSendString>

			if(APP_SOUND_TRACK_ARRAY[1] == 0)
    2df6:	80 91 93 01 	lds	r24, 0x0193
    2dfa:	88 23       	and	r24, r24
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <main+0x18e>
    2dfe:	88 c0       	rjmp	.+272    	; 0x2f10 <main+0x29e>
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,2);
    2e00:	83 e0       	ldi	r24, 0x03	; 3
    2e02:	62 e0       	ldi	r22, 0x02	; 2
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DFPLAYER_SendCMD>
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2e0a:	1f 86       	std	Y+15, r1	; 0x0f
    2e0c:	0a c0       	rjmp	.+20     	; 0x2e22 <main+0x1b0>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
    2e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e10:	88 2f       	mov	r24, r24
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	fc 01       	movw	r30, r24
    2e16:	ee 56       	subi	r30, 0x6E	; 110
    2e18:	fe 4f       	sbci	r31, 0xFE	; 254
    2e1a:	10 82       	st	Z, r1
			LCD_vidSendString((u8 *)"Two");

			if(APP_SOUND_TRACK_ARRAY[1] == 0)
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,2);
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e1e:	8f 5f       	subi	r24, 0xFF	; 255
    2e20:	8f 87       	std	Y+15, r24	; 0x0f
    2e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e24:	85 30       	cpi	r24, 0x05	; 5
    2e26:	98 f3       	brcs	.-26     	; 0x2e0e <main+0x19c>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
				}
				APP_SOUND_TRACK_ARRAY[1] =1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	80 93 93 01 	sts	0x0193, r24
    2e2e:	70 c0       	rjmp	.+224    	; 0x2f10 <main+0x29e>
			else
			{
				//DoNothing
			}
		}
		else if(global_arr[SENSOR_ONE] == 'B' && global_arr[SENSOR_TWO] == 'A' && global_arr[SENSOR_THREE] == 'A'
    2e30:	80 91 9a 01 	lds	r24, 0x019A
    2e34:	82 34       	cpi	r24, 0x42	; 66
    2e36:	a9 f5       	brne	.+106    	; 0x2ea2 <main+0x230>
    2e38:	80 91 9b 01 	lds	r24, 0x019B
    2e3c:	81 34       	cpi	r24, 0x41	; 65
    2e3e:	89 f5       	brne	.+98     	; 0x2ea2 <main+0x230>
    2e40:	80 91 9c 01 	lds	r24, 0x019C
    2e44:	81 34       	cpi	r24, 0x41	; 65
    2e46:	69 f5       	brne	.+90     	; 0x2ea2 <main+0x230>
    2e48:	80 91 9d 01 	lds	r24, 0x019D
    2e4c:	81 34       	cpi	r24, 0x41	; 65
    2e4e:	49 f5       	brne	.+82     	; 0x2ea2 <main+0x230>
    2e50:	80 91 9e 01 	lds	r24, 0x019E
    2e54:	82 34       	cpi	r24, 0x42	; 66
    2e56:	29 f5       	brne	.+74     	; 0x2ea2 <main+0x230>
				&& global_arr[SENSOR_FOUR] == 'A' && global_arr[SENSOR_FIVE] == 'B')
		{
			LCD_u8Goto(2, 10);
    2e58:	82 e0       	ldi	r24, 0x02	; 2
    2e5a:	6a e0       	ldi	r22, 0x0A	; 10
    2e5c:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
			LCD_vidSendString((u8 *)"Three");
    2e60:	85 e7       	ldi	r24, 0x75	; 117
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_vidSendString>
			if(APP_SOUND_TRACK_ARRAY[2] == 0)
    2e68:	80 91 94 01 	lds	r24, 0x0194
    2e6c:	88 23       	and	r24, r24
    2e6e:	09 f0       	breq	.+2      	; 0x2e72 <main+0x200>
    2e70:	4f c0       	rjmp	.+158    	; 0x2f10 <main+0x29e>
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,3);
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	63 e0       	ldi	r22, 0x03	; 3
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DFPLAYER_SendCMD>
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2e7c:	1f 86       	std	Y+15, r1	; 0x0f
    2e7e:	0a c0       	rjmp	.+20     	; 0x2e94 <main+0x222>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
    2e80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e82:	88 2f       	mov	r24, r24
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	fc 01       	movw	r30, r24
    2e88:	ee 56       	subi	r30, 0x6E	; 110
    2e8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e8c:	10 82       	st	Z, r1
			LCD_u8Goto(2, 10);
			LCD_vidSendString((u8 *)"Three");
			if(APP_SOUND_TRACK_ARRAY[2] == 0)
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,3);
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e90:	8f 5f       	subi	r24, 0xFF	; 255
    2e92:	8f 87       	std	Y+15, r24	; 0x0f
    2e94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e96:	85 30       	cpi	r24, 0x05	; 5
    2e98:	98 f3       	brcs	.-26     	; 0x2e80 <main+0x20e>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
				}
				APP_SOUND_TRACK_ARRAY[2] =1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	80 93 94 01 	sts	0x0194, r24
    2ea0:	37 c0       	rjmp	.+110    	; 0x2f10 <main+0x29e>
			{
				//DoNothing
			}
		}

		else if(global_arr[SENSOR_ONE] == 'B' && global_arr[SENSOR_TWO] == 'A' && global_arr[SENSOR_THREE] == 'A'
    2ea2:	80 91 9a 01 	lds	r24, 0x019A
    2ea6:	82 34       	cpi	r24, 0x42	; 66
    2ea8:	99 f5       	brne	.+102    	; 0x2f10 <main+0x29e>
    2eaa:	80 91 9b 01 	lds	r24, 0x019B
    2eae:	81 34       	cpi	r24, 0x41	; 65
    2eb0:	79 f5       	brne	.+94     	; 0x2f10 <main+0x29e>
    2eb2:	80 91 9c 01 	lds	r24, 0x019C
    2eb6:	81 34       	cpi	r24, 0x41	; 65
    2eb8:	59 f5       	brne	.+86     	; 0x2f10 <main+0x29e>
    2eba:	80 91 9d 01 	lds	r24, 0x019D
    2ebe:	81 34       	cpi	r24, 0x41	; 65
    2ec0:	39 f5       	brne	.+78     	; 0x2f10 <main+0x29e>
    2ec2:	80 91 9e 01 	lds	r24, 0x019E
    2ec6:	81 34       	cpi	r24, 0x41	; 65
    2ec8:	19 f5       	brne	.+70     	; 0x2f10 <main+0x29e>
				&& global_arr[SENSOR_FOUR] == 'A' && global_arr[SENSOR_FIVE] == 'A')
		{
			LCD_u8Goto(2, 10);
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	6a e0       	ldi	r22, 0x0A	; 10
    2ece:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
			LCD_vidSendString((u8 *)"Four");
    2ed2:	8b e7       	ldi	r24, 0x7B	; 123
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	0e 94 8a 13 	call	0x2714	; 0x2714 <LCD_vidSendString>
			if(APP_SOUND_TRACK_ARRAY[3] == 0)
    2eda:	80 91 95 01 	lds	r24, 0x0195
    2ede:	88 23       	and	r24, r24
    2ee0:	b9 f4       	brne	.+46     	; 0x2f10 <main+0x29e>
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,4);
    2ee2:	83 e0       	ldi	r24, 0x03	; 3
    2ee4:	64 e0       	ldi	r22, 0x04	; 4
    2ee6:	70 e0       	ldi	r23, 0x00	; 0
    2ee8:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DFPLAYER_SendCMD>
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2eec:	1f 86       	std	Y+15, r1	; 0x0f
    2eee:	0a c0       	rjmp	.+20     	; 0x2f04 <main+0x292>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
    2ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	ee 56       	subi	r30, 0x6E	; 110
    2efa:	fe 4f       	sbci	r31, 0xFE	; 254
    2efc:	10 82       	st	Z, r1
			LCD_u8Goto(2, 10);
			LCD_vidSendString((u8 *)"Four");
			if(APP_SOUND_TRACK_ARRAY[3] == 0)
			{
				DFPLAYER_SendCMD(DFPLAYER_CMD_t_Specify_tracking,4);
				for(Local_u8Counter = 0; Local_u8Counter <5 ; Local_u8Counter++)
    2efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	8f 87       	std	Y+15, r24	; 0x0f
    2f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f06:	85 30       	cpi	r24, 0x05	; 5
    2f08:	98 f3       	brcs	.-26     	; 0x2ef0 <main+0x27e>
				{
					APP_SOUND_TRACK_ARRAY[Local_u8Counter] =0;
				}
				APP_SOUND_TRACK_ARRAY[3] =1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	80 93 95 01 	sts	0x0195, r24
    2f10:	80 e0       	ldi	r24, 0x00	; 0
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	a8 e4       	ldi	r26, 0x48	; 72
    2f16:	b3 e4       	ldi	r27, 0x43	; 67
    2f18:	8b 87       	std	Y+11, r24	; 0x0b
    2f1a:	9c 87       	std	Y+12, r25	; 0x0c
    2f1c:	ad 87       	std	Y+13, r26	; 0x0d
    2f1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	4a ef       	ldi	r20, 0xFA	; 250
    2f2e:	54 e4       	ldi	r21, 0x44	; 68
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	8f 83       	std	Y+7, r24	; 0x07
    2f3a:	98 87       	std	Y+8, r25	; 0x08
    2f3c:	a9 87       	std	Y+9, r26	; 0x09
    2f3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f40:	6f 81       	ldd	r22, Y+7	; 0x07
    2f42:	78 85       	ldd	r23, Y+8	; 0x08
    2f44:	89 85       	ldd	r24, Y+9	; 0x09
    2f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e8       	ldi	r20, 0x80	; 128
    2f4e:	5f e3       	ldi	r21, 0x3F	; 63
    2f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f54:	88 23       	and	r24, r24
    2f56:	2c f4       	brge	.+10     	; 0x2f62 <main+0x2f0>
		__ticks = 1;
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	9e 83       	std	Y+6, r25	; 0x06
    2f5e:	8d 83       	std	Y+5, r24	; 0x05
    2f60:	3f c0       	rjmp	.+126    	; 0x2fe0 <main+0x36e>
	else if (__tmp > 65535)
    2f62:	6f 81       	ldd	r22, Y+7	; 0x07
    2f64:	78 85       	ldd	r23, Y+8	; 0x08
    2f66:	89 85       	ldd	r24, Y+9	; 0x09
    2f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	3f ef       	ldi	r19, 0xFF	; 255
    2f6e:	4f e7       	ldi	r20, 0x7F	; 127
    2f70:	57 e4       	ldi	r21, 0x47	; 71
    2f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f76:	18 16       	cp	r1, r24
    2f78:	4c f5       	brge	.+82     	; 0x2fcc <main+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	0f c0       	rjmp	.+30     	; 0x2fc2 <main+0x350>
    2fa4:	88 ec       	ldi	r24, 0xC8	; 200
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9c 83       	std	Y+4, r25	; 0x04
    2faa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <main+0x33e>
    2fb4:	9c 83       	std	Y+4, r25	; 0x04
    2fb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fba:	9e 81       	ldd	r25, Y+6	; 0x06
    2fbc:	01 97       	sbiw	r24, 0x01	; 1
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	69 f7       	brne	.-38     	; 0x2fa4 <main+0x332>
    2fca:	63 ce       	rjmp	.-826    	; 0x2c92 <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fce:	78 85       	ldd	r23, Y+8	; 0x08
    2fd0:	89 85       	ldd	r24, Y+9	; 0x09
    2fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9e 83       	std	Y+6, r25	; 0x06
    2fde:	8d 83       	std	Y+5, r24	; 0x05
    2fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe4:	9a 83       	std	Y+2, r25	; 0x02
    2fe6:	89 83       	std	Y+1, r24	; 0x01
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <main+0x37a>
    2ff0:	9a 83       	std	Y+2, r25	; 0x02
    2ff2:	89 83       	std	Y+1, r24	; 0x01
    2ff4:	4e ce       	rjmp	.-868    	; 0x2c92 <main+0x20>

00002ff6 <read_sensors>:

	}
}

void read_sensors(void)
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <read_sensors+0x6>
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <read_sensors+0x8>
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	f64 sensor_res_ohm = 0;
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e0       	ldi	r26, 0x00	; 0
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	89 83       	std	Y+1, r24	; 0x01
    300c:	9a 83       	std	Y+2, r25	; 0x02
    300e:	ab 83       	std	Y+3, r26	; 0x03
    3010:	bc 83       	std	Y+4, r27	; 0x04
	LCD_vidClear();
    3012:	0e 94 6f 12 	call	0x24de	; 0x24de <LCD_vidClear>

	FLEX_u8GetResValue_ohm(SENSOR_ONE, &sensor_res_ohm);
    3016:	83 e0       	ldi	r24, 0x03	; 3
    3018:	9e 01       	movw	r18, r28
    301a:	2f 5f       	subi	r18, 0xFF	; 255
    301c:	3f 4f       	sbci	r19, 0xFF	; 255
    301e:	b9 01       	movw	r22, r18
    3020:	0e 94 49 15 	call	0x2a92	; 0x2a92 <FLEX_u8GetResValue_ohm>
	LCD_u8Goto(1, 1);
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	61 e0       	ldi	r22, 0x01	; 1
    3028:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
	LCD_vidSendInt(sensor_res_ohm/1000);
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	9a 81       	ldd	r25, Y+2	; 0x02
    3030:	ab 81       	ldd	r26, Y+3	; 0x03
    3032:	bc 81       	ldd	r27, Y+4	; 0x04
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	4a e7       	ldi	r20, 0x7A	; 122
    303e:	54 e4       	ldi	r21, 0x44	; 68
    3040:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_vidSendInt>
	mapping(sensor_res_ohm, SENSOR_ONE);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	9a 81       	ldd	r25, Y+2	; 0x02
    3060:	ab 81       	ldd	r26, Y+3	; 0x03
    3062:	bc 81       	ldd	r27, Y+4	; 0x04
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	43 e0       	ldi	r20, 0x03	; 3
    306a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <mapping>

	FLEX_u8GetResValue_ohm(SENSOR_TWO, &sensor_res_ohm);
    306e:	84 e0       	ldi	r24, 0x04	; 4
    3070:	9e 01       	movw	r18, r28
    3072:	2f 5f       	subi	r18, 0xFF	; 255
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	b9 01       	movw	r22, r18
    3078:	0e 94 49 15 	call	0x2a92	; 0x2a92 <FLEX_u8GetResValue_ohm>
	LCD_u8Goto(1, 5);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	65 e0       	ldi	r22, 0x05	; 5
    3080:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
	LCD_vidSendInt(sensor_res_ohm/1000);
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	9a 81       	ldd	r25, Y+2	; 0x02
    3088:	ab 81       	ldd	r26, Y+3	; 0x03
    308a:	bc 81       	ldd	r27, Y+4	; 0x04
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	4a e7       	ldi	r20, 0x7A	; 122
    3096:	54 e4       	ldi	r21, 0x44	; 68
    3098:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	bc 01       	movw	r22, r24
    30a2:	cd 01       	movw	r24, r26
    30a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_vidSendInt>
	mapping(sensor_res_ohm, SENSOR_TWO);
    30b4:	89 81       	ldd	r24, Y+1	; 0x01
    30b6:	9a 81       	ldd	r25, Y+2	; 0x02
    30b8:	ab 81       	ldd	r26, Y+3	; 0x03
    30ba:	bc 81       	ldd	r27, Y+4	; 0x04
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	44 e0       	ldi	r20, 0x04	; 4
    30c2:	0e 94 ee 18 	call	0x31dc	; 0x31dc <mapping>

	FLEX_u8GetResValue_ohm(SENSOR_THREE, &sensor_res_ohm);
    30c6:	85 e0       	ldi	r24, 0x05	; 5
    30c8:	9e 01       	movw	r18, r28
    30ca:	2f 5f       	subi	r18, 0xFF	; 255
    30cc:	3f 4f       	sbci	r19, 0xFF	; 255
    30ce:	b9 01       	movw	r22, r18
    30d0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <FLEX_u8GetResValue_ohm>
	LCD_u8Goto(1, 9);
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	69 e0       	ldi	r22, 0x09	; 9
    30d8:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
	LCD_vidSendInt(sensor_res_ohm/1000);
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	ab 81       	ldd	r26, Y+3	; 0x03
    30e2:	bc 81       	ldd	r27, Y+4	; 0x04
    30e4:	bc 01       	movw	r22, r24
    30e6:	cd 01       	movw	r24, r26
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	54 e4       	ldi	r21, 0x44	; 68
    30f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	bc 01       	movw	r22, r24
    30fa:	cd 01       	movw	r24, r26
    30fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	bc 01       	movw	r22, r24
    3106:	cd 01       	movw	r24, r26
    3108:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_vidSendInt>
	mapping(sensor_res_ohm, SENSOR_THREE);
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	ab 81       	ldd	r26, Y+3	; 0x03
    3112:	bc 81       	ldd	r27, Y+4	; 0x04
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	45 e0       	ldi	r20, 0x05	; 5
    311a:	0e 94 ee 18 	call	0x31dc	; 0x31dc <mapping>

	FLEX_u8GetResValue_ohm(SENSOR_FOUR, &sensor_res_ohm);
    311e:	86 e0       	ldi	r24, 0x06	; 6
    3120:	9e 01       	movw	r18, r28
    3122:	2f 5f       	subi	r18, 0xFF	; 255
    3124:	3f 4f       	sbci	r19, 0xFF	; 255
    3126:	b9 01       	movw	r22, r18
    3128:	0e 94 49 15 	call	0x2a92	; 0x2a92 <FLEX_u8GetResValue_ohm>
	LCD_u8Goto(2, 1);
    312c:	82 e0       	ldi	r24, 0x02	; 2
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
	LCD_vidSendInt(sensor_res_ohm/1000);
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	9a 81       	ldd	r25, Y+2	; 0x02
    3138:	ab 81       	ldd	r26, Y+3	; 0x03
    313a:	bc 81       	ldd	r27, Y+4	; 0x04
    313c:	bc 01       	movw	r22, r24
    313e:	cd 01       	movw	r24, r26
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a e7       	ldi	r20, 0x7A	; 122
    3146:	54 e4       	ldi	r21, 0x44	; 68
    3148:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	bc 01       	movw	r22, r24
    315e:	cd 01       	movw	r24, r26
    3160:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_vidSendInt>
	mapping(sensor_res_ohm, SENSOR_FOUR);
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	9a 81       	ldd	r25, Y+2	; 0x02
    3168:	ab 81       	ldd	r26, Y+3	; 0x03
    316a:	bc 81       	ldd	r27, Y+4	; 0x04
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	46 e0       	ldi	r20, 0x06	; 6
    3172:	0e 94 ee 18 	call	0x31dc	; 0x31dc <mapping>

	FLEX_u8GetResValue_ohm(SENSOR_FIVE, &sensor_res_ohm);
    3176:	87 e0       	ldi	r24, 0x07	; 7
    3178:	9e 01       	movw	r18, r28
    317a:	2f 5f       	subi	r18, 0xFF	; 255
    317c:	3f 4f       	sbci	r19, 0xFF	; 255
    317e:	b9 01       	movw	r22, r18
    3180:	0e 94 49 15 	call	0x2a92	; 0x2a92 <FLEX_u8GetResValue_ohm>
	LCD_u8Goto(2, 5);
    3184:	82 e0       	ldi	r24, 0x02	; 2
    3186:	65 e0       	ldi	r22, 0x05	; 5
    3188:	0e 94 43 13 	call	0x2686	; 0x2686 <LCD_u8Goto>
	LCD_vidSendInt(sensor_res_ohm/1000);
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	ab 81       	ldd	r26, Y+3	; 0x03
    3192:	bc 81       	ldd	r27, Y+4	; 0x04
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	4a e7       	ldi	r20, 0x7A	; 122
    319e:	54 e4       	ldi	r21, 0x44	; 68
    31a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_vidSendInt>
	mapping(sensor_res_ohm, SENSOR_FIVE);
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	ab 81       	ldd	r26, Y+3	; 0x03
    31c2:	bc 81       	ldd	r27, Y+4	; 0x04
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	47 e0       	ldi	r20, 0x07	; 7
    31ca:	0e 94 ee 18 	call	0x31dc	; 0x31dc <mapping>
}
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <mapping>:

void mapping(f64 sensor_read, u8 sensor_no)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	27 97       	sbiw	r28, 0x07	; 7
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
    31f0:	69 83       	std	Y+1, r22	; 0x01
    31f2:	7a 83       	std	Y+2, r23	; 0x02
    31f4:	8b 83       	std	Y+3, r24	; 0x03
    31f6:	9c 83       	std	Y+4, r25	; 0x04
    31f8:	4d 83       	std	Y+5, r20	; 0x05
	switch(sensor_no)
    31fa:	8d 81       	ldd	r24, Y+5	; 0x05
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	3f 83       	std	Y+7, r19	; 0x07
    3202:	2e 83       	std	Y+6, r18	; 0x06
    3204:	8e 81       	ldd	r24, Y+6	; 0x06
    3206:	9f 81       	ldd	r25, Y+7	; 0x07
    3208:	85 30       	cpi	r24, 0x05	; 5
    320a:	91 05       	cpc	r25, r1
    320c:	09 f4       	brne	.+2      	; 0x3210 <mapping+0x34>
    320e:	45 c0       	rjmp	.+138    	; 0x329a <mapping+0xbe>
    3210:	2e 81       	ldd	r18, Y+6	; 0x06
    3212:	3f 81       	ldd	r19, Y+7	; 0x07
    3214:	26 30       	cpi	r18, 0x06	; 6
    3216:	31 05       	cpc	r19, r1
    3218:	5c f4       	brge	.+22     	; 0x3230 <mapping+0x54>
    321a:	8e 81       	ldd	r24, Y+6	; 0x06
    321c:	9f 81       	ldd	r25, Y+7	; 0x07
    321e:	83 30       	cpi	r24, 0x03	; 3
    3220:	91 05       	cpc	r25, r1
    3222:	99 f0       	breq	.+38     	; 0x324a <mapping+0x6e>
    3224:	2e 81       	ldd	r18, Y+6	; 0x06
    3226:	3f 81       	ldd	r19, Y+7	; 0x07
    3228:	24 30       	cpi	r18, 0x04	; 4
    322a:	31 05       	cpc	r19, r1
    322c:	11 f1       	breq	.+68     	; 0x3272 <mapping+0x96>
    322e:	70 c0       	rjmp	.+224    	; 0x3310 <mapping+0x134>
    3230:	8e 81       	ldd	r24, Y+6	; 0x06
    3232:	9f 81       	ldd	r25, Y+7	; 0x07
    3234:	86 30       	cpi	r24, 0x06	; 6
    3236:	91 05       	cpc	r25, r1
    3238:	09 f4       	brne	.+2      	; 0x323c <mapping+0x60>
    323a:	43 c0       	rjmp	.+134    	; 0x32c2 <mapping+0xe6>
    323c:	2e 81       	ldd	r18, Y+6	; 0x06
    323e:	3f 81       	ldd	r19, Y+7	; 0x07
    3240:	27 30       	cpi	r18, 0x07	; 7
    3242:	31 05       	cpc	r19, r1
    3244:	09 f4       	brne	.+2      	; 0x3248 <mapping+0x6c>
    3246:	51 c0       	rjmp	.+162    	; 0x32ea <mapping+0x10e>
    3248:	63 c0       	rjmp	.+198    	; 0x3310 <mapping+0x134>
	{
	case SENSOR_ONE:
		if(sensor_read <= (f64)35000)
    324a:	69 81       	ldd	r22, Y+1	; 0x01
    324c:	7a 81       	ldd	r23, Y+2	; 0x02
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	9c 81       	ldd	r25, Y+4	; 0x04
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	38 eb       	ldi	r19, 0xB8	; 184
    3256:	48 e0       	ldi	r20, 0x08	; 8
    3258:	57 e4       	ldi	r21, 0x47	; 71
    325a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    325e:	18 16       	cp	r1, r24
    3260:	24 f0       	brlt	.+8      	; 0x326a <mapping+0x8e>
		{
			global_arr[SENSOR_ONE] = 'A';
    3262:	81 e4       	ldi	r24, 0x41	; 65
    3264:	80 93 9a 01 	sts	0x019A, r24
    3268:	53 c0       	rjmp	.+166    	; 0x3310 <mapping+0x134>
		//		{
		//			global_arr[0] = 'B';
		//		}
		else //if(sensor_read <= (f64)80000)
		{
			global_arr[SENSOR_ONE] = 'B';
    326a:	82 e4       	ldi	r24, 0x42	; 66
    326c:	80 93 9a 01 	sts	0x019A, r24
    3270:	4f c0       	rjmp	.+158    	; 0x3310 <mapping+0x134>
		}
		break;
	case SENSOR_TWO:
		if(sensor_read <= (f64)32000)
    3272:	69 81       	ldd	r22, Y+1	; 0x01
    3274:	7a 81       	ldd	r23, Y+2	; 0x02
    3276:	8b 81       	ldd	r24, Y+3	; 0x03
    3278:	9c 81       	ldd	r25, Y+4	; 0x04
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a ef       	ldi	r20, 0xFA	; 250
    3280:	56 e4       	ldi	r21, 0x46	; 70
    3282:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3286:	18 16       	cp	r1, r24
    3288:	24 f0       	brlt	.+8      	; 0x3292 <mapping+0xb6>
		{
			global_arr[SENSOR_TWO] = 'A';
    328a:	81 e4       	ldi	r24, 0x41	; 65
    328c:	80 93 9b 01 	sts	0x019B, r24
    3290:	3f c0       	rjmp	.+126    	; 0x3310 <mapping+0x134>
		}
		else //if(sensor_read <= (f64)52000)
		{
			global_arr[SENSOR_TWO] = 'B';
    3292:	82 e4       	ldi	r24, 0x42	; 66
    3294:	80 93 9b 01 	sts	0x019B, r24
    3298:	3b c0       	rjmp	.+118    	; 0x3310 <mapping+0x134>
		}

		break;
	case SENSOR_THREE:
		if(sensor_read <= (f64)39000)
    329a:	69 81       	ldd	r22, Y+1	; 0x01
    329c:	7a 81       	ldd	r23, Y+2	; 0x02
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	38 e5       	ldi	r19, 0x58	; 88
    32a6:	48 e1       	ldi	r20, 0x18	; 24
    32a8:	57 e4       	ldi	r21, 0x47	; 71
    32aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    32ae:	18 16       	cp	r1, r24
    32b0:	24 f0       	brlt	.+8      	; 0x32ba <mapping+0xde>
		{
			global_arr[SENSOR_THREE] = 'A';
    32b2:	81 e4       	ldi	r24, 0x41	; 65
    32b4:	80 93 9c 01 	sts	0x019C, r24
    32b8:	2b c0       	rjmp	.+86     	; 0x3310 <mapping+0x134>
		}
		else //if(sensor_read <= (f64)65000)
		{
			global_arr[SENSOR_THREE] = 'B';
    32ba:	82 e4       	ldi	r24, 0x42	; 66
    32bc:	80 93 9c 01 	sts	0x019C, r24
    32c0:	27 c0       	rjmp	.+78     	; 0x3310 <mapping+0x134>
		//		}

		break;

	case SENSOR_FOUR:
		if(sensor_read <= (f64)40000)
    32c2:	69 81       	ldd	r22, Y+1	; 0x01
    32c4:	7a 81       	ldd	r23, Y+2	; 0x02
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e4       	ldi	r19, 0x40	; 64
    32ce:	4c e1       	ldi	r20, 0x1C	; 28
    32d0:	57 e4       	ldi	r21, 0x47	; 71
    32d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    32d6:	18 16       	cp	r1, r24
    32d8:	24 f0       	brlt	.+8      	; 0x32e2 <mapping+0x106>
		{
			global_arr[SENSOR_FOUR] = 'A';
    32da:	81 e4       	ldi	r24, 0x41	; 65
    32dc:	80 93 9d 01 	sts	0x019D, r24
    32e0:	17 c0       	rjmp	.+46     	; 0x3310 <mapping+0x134>
		}
		else //if(sensor_read <= (f64)105000)
		{
			global_arr[SENSOR_FOUR] = 'B';
    32e2:	82 e4       	ldi	r24, 0x42	; 66
    32e4:	80 93 9d 01 	sts	0x019D, r24
    32e8:	13 c0       	rjmp	.+38     	; 0x3310 <mapping+0x134>
		//			global_arr[2] = 'B';
		//		}

		break;
	case SENSOR_FIVE:
		if(sensor_read <= (f64)40000)
    32ea:	69 81       	ldd	r22, Y+1	; 0x01
    32ec:	7a 81       	ldd	r23, Y+2	; 0x02
    32ee:	8b 81       	ldd	r24, Y+3	; 0x03
    32f0:	9c 81       	ldd	r25, Y+4	; 0x04
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	30 e4       	ldi	r19, 0x40	; 64
    32f6:	4c e1       	ldi	r20, 0x1C	; 28
    32f8:	57 e4       	ldi	r21, 0x47	; 71
    32fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    32fe:	18 16       	cp	r1, r24
    3300:	24 f0       	brlt	.+8      	; 0x330a <mapping+0x12e>
		{
			global_arr[SENSOR_FIVE] = 'A';
    3302:	81 e4       	ldi	r24, 0x41	; 65
    3304:	80 93 9e 01 	sts	0x019E, r24
    3308:	03 c0       	rjmp	.+6      	; 0x3310 <mapping+0x134>
		}
		else //if(sensor_read <= (f64)80000)
		{
			global_arr[SENSOR_FIVE] = 'B';
    330a:	82 e4       	ldi	r24, 0x42	; 66
    330c:	80 93 9e 01 	sts	0x019E, r24

		break;


	}
}
    3310:	27 96       	adiw	r28, 0x07	; 7
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	08 95       	ret

00003322 <__mulsi3>:
    3322:	62 9f       	mul	r22, r18
    3324:	d0 01       	movw	r26, r0
    3326:	73 9f       	mul	r23, r19
    3328:	f0 01       	movw	r30, r0
    332a:	82 9f       	mul	r24, r18
    332c:	e0 0d       	add	r30, r0
    332e:	f1 1d       	adc	r31, r1
    3330:	64 9f       	mul	r22, r20
    3332:	e0 0d       	add	r30, r0
    3334:	f1 1d       	adc	r31, r1
    3336:	92 9f       	mul	r25, r18
    3338:	f0 0d       	add	r31, r0
    333a:	83 9f       	mul	r24, r19
    333c:	f0 0d       	add	r31, r0
    333e:	74 9f       	mul	r23, r20
    3340:	f0 0d       	add	r31, r0
    3342:	65 9f       	mul	r22, r21
    3344:	f0 0d       	add	r31, r0
    3346:	99 27       	eor	r25, r25
    3348:	72 9f       	mul	r23, r18
    334a:	b0 0d       	add	r27, r0
    334c:	e1 1d       	adc	r30, r1
    334e:	f9 1f       	adc	r31, r25
    3350:	63 9f       	mul	r22, r19
    3352:	b0 0d       	add	r27, r0
    3354:	e1 1d       	adc	r30, r1
    3356:	f9 1f       	adc	r31, r25
    3358:	bd 01       	movw	r22, r26
    335a:	cf 01       	movw	r24, r30
    335c:	11 24       	eor	r1, r1
    335e:	08 95       	ret

00003360 <__udivmodsi4>:
    3360:	a1 e2       	ldi	r26, 0x21	; 33
    3362:	1a 2e       	mov	r1, r26
    3364:	aa 1b       	sub	r26, r26
    3366:	bb 1b       	sub	r27, r27
    3368:	fd 01       	movw	r30, r26
    336a:	0d c0       	rjmp	.+26     	; 0x3386 <__udivmodsi4_ep>

0000336c <__udivmodsi4_loop>:
    336c:	aa 1f       	adc	r26, r26
    336e:	bb 1f       	adc	r27, r27
    3370:	ee 1f       	adc	r30, r30
    3372:	ff 1f       	adc	r31, r31
    3374:	a2 17       	cp	r26, r18
    3376:	b3 07       	cpc	r27, r19
    3378:	e4 07       	cpc	r30, r20
    337a:	f5 07       	cpc	r31, r21
    337c:	20 f0       	brcs	.+8      	; 0x3386 <__udivmodsi4_ep>
    337e:	a2 1b       	sub	r26, r18
    3380:	b3 0b       	sbc	r27, r19
    3382:	e4 0b       	sbc	r30, r20
    3384:	f5 0b       	sbc	r31, r21

00003386 <__udivmodsi4_ep>:
    3386:	66 1f       	adc	r22, r22
    3388:	77 1f       	adc	r23, r23
    338a:	88 1f       	adc	r24, r24
    338c:	99 1f       	adc	r25, r25
    338e:	1a 94       	dec	r1
    3390:	69 f7       	brne	.-38     	; 0x336c <__udivmodsi4_loop>
    3392:	60 95       	com	r22
    3394:	70 95       	com	r23
    3396:	80 95       	com	r24
    3398:	90 95       	com	r25
    339a:	9b 01       	movw	r18, r22
    339c:	ac 01       	movw	r20, r24
    339e:	bd 01       	movw	r22, r26
    33a0:	cf 01       	movw	r24, r30
    33a2:	08 95       	ret

000033a4 <__prologue_saves__>:
    33a4:	2f 92       	push	r2
    33a6:	3f 92       	push	r3
    33a8:	4f 92       	push	r4
    33aa:	5f 92       	push	r5
    33ac:	6f 92       	push	r6
    33ae:	7f 92       	push	r7
    33b0:	8f 92       	push	r8
    33b2:	9f 92       	push	r9
    33b4:	af 92       	push	r10
    33b6:	bf 92       	push	r11
    33b8:	cf 92       	push	r12
    33ba:	df 92       	push	r13
    33bc:	ef 92       	push	r14
    33be:	ff 92       	push	r15
    33c0:	0f 93       	push	r16
    33c2:	1f 93       	push	r17
    33c4:	cf 93       	push	r28
    33c6:	df 93       	push	r29
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	ca 1b       	sub	r28, r26
    33ce:	db 0b       	sbc	r29, r27
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	09 94       	ijmp

000033dc <__epilogue_restores__>:
    33dc:	2a 88       	ldd	r2, Y+18	; 0x12
    33de:	39 88       	ldd	r3, Y+17	; 0x11
    33e0:	48 88       	ldd	r4, Y+16	; 0x10
    33e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    33e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    33ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    33ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    33ee:	b9 84       	ldd	r11, Y+9	; 0x09
    33f0:	c8 84       	ldd	r12, Y+8	; 0x08
    33f2:	df 80       	ldd	r13, Y+7	; 0x07
    33f4:	ee 80       	ldd	r14, Y+6	; 0x06
    33f6:	fd 80       	ldd	r15, Y+5	; 0x05
    33f8:	0c 81       	ldd	r16, Y+4	; 0x04
    33fa:	1b 81       	ldd	r17, Y+3	; 0x03
    33fc:	aa 81       	ldd	r26, Y+2	; 0x02
    33fe:	b9 81       	ldd	r27, Y+1	; 0x01
    3400:	ce 0f       	add	r28, r30
    3402:	d1 1d       	adc	r29, r1
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	ed 01       	movw	r28, r26
    3410:	08 95       	ret

00003412 <_exit>:
    3412:	f8 94       	cli

00003414 <__stop_program>:
    3414:	ff cf       	rjmp	.-2      	; 0x3414 <__stop_program>
